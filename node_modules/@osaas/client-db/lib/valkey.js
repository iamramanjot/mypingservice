"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValkeyDb = void 0;
const client_core_1 = require("@osaas/client-core");
const client_services_1 = require("@osaas/client-services");
const SERVICE_ID = 'valkey-io-valkey';
class ValkeyDb {
    context;
    name;
    url;
    constructor({ context, name }) {
        this.context = context;
        this.name = name;
    }
    static async list(ctx) {
        const token = await ctx.getServiceAccessToken(SERVICE_ID);
        const instances = await (0, client_core_1.listInstances)(ctx, SERVICE_ID, token);
        return instances.map((instance) => {
            return new ValkeyDb({ context: ctx, name: instance.name });
        });
    }
    async getRedisPort() {
        const token = await this.context.getServiceAccessToken(SERVICE_ID);
        const ports = await (0, client_core_1.getPortsForInstance)(this.context, SERVICE_ID, this.name, token);
        const redisPort = ports.find((port) => port.internalPort == 6379);
        return redisPort;
    }
    async init() {
        const instance = await (0, client_services_1.getValkeyIoValkeyInstance)(this.context, this.name);
        if (!instance) {
            await (0, client_services_1.createValkeyIoValkeyInstance)(this.context, { name: this.name });
        }
        const redisPort = await this.getRedisPort();
        if (redisPort) {
            this.url = new URL(`redis://${redisPort.externalIp}:${redisPort.externalPort}`);
        }
    }
    async destroy() {
        try {
            await (0, client_services_1.removeValkeyIoValkeyInstance)(this.context, this.name);
        }
        catch (err) {
            (0, client_core_1.Log)().error(err.message);
        }
    }
    async getRedisUrl() {
        if (!this.url) {
            await this.init();
        }
        return this.url;
    }
    getName() {
        return this.name;
    }
}
exports.ValkeyDb = ValkeyDb;
//# sourceMappingURL=valkey.js.map