/** @module @osaas/client-db */
export { ValkeyDb } from './valkey';
export type DatabaseType = 'valkey' | 'postgres' | 'mariadb' | 'clickhouse' | 'couchdb';
export declare const DatabaseTypeToServiceId: Record<DatabaseType, string>;
export declare const DatabaseTypeToPort: Record<DatabaseType, number>;
export declare const DatabaseTypeToProtocol: Record<DatabaseType, string>;
export interface DatabaseOpts {
    username?: string;
    password?: string;
    rootPassword?: string;
    database?: string;
}
/**
 * @typedef {object} DatabaseOpts
 * @property {string} [username] - The username for the database
 * @property {string} [password] - The password for the database
 * @property {string} [rootPassword] - The root password for the database
 * @property {string} [database] - The database name
 */
/**
 * Create a database instance if it does not exists
 * and return the connection URL.
 *
 * @param {DatabaseType} type The type of the database.
 * @param {string} name The name of the database instance.
 * @param {DatabaseOpts} opts The options for the database.
 * @returns The connection URL for the database.
 *
 * @example
 * import { setupDatabase } from '@osaas/client-db';
 * import Redis from 'ioredis';
 *
 * const dbUrl = await setupDatabase('valkey', 'myvalkey', { password: 'secret' });
 * const client = new Redis(dbUrl);
 * try {
 *   await client.subscribe('messages');
 *   console.log('Waiting for messages...');
 *   client.on('message', (channel, message) => {
 *     console.log(`Received message: ${message} from ${channel}`);
 *   });
 * } catch (err) {
 *   console.error('Error:', err);
 * }
 */
export declare function setupDatabase(type: DatabaseType, name: string, opts: DatabaseOpts): Promise<string>;
//# sourceMappingURL=index.d.ts.map