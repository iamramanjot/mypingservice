"use strict";
/** @module @osaas/client-db */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupDatabase = exports.DatabaseTypeToProtocol = exports.DatabaseTypeToPort = exports.DatabaseTypeToServiceId = exports.ValkeyDb = void 0;
const client_core_1 = require("@osaas/client-core");
const client_services_1 = require("@osaas/client-services");
var valkey_1 = require("./valkey");
Object.defineProperty(exports, "ValkeyDb", { enumerable: true, get: function () { return valkey_1.ValkeyDb; } });
exports.DatabaseTypeToServiceId = {
    valkey: 'valkey-io-valkey',
    postgres: 'birme-osc-postgresql',
    mariadb: 'linuxserver-docker-mariadb',
    clickhouse: 'clickhouse-clickhouse',
    couchdb: 'apache-couchdb'
};
exports.DatabaseTypeToPort = {
    valkey: 6379,
    postgres: 5432,
    mariadb: 3306,
    clickhouse: 9000,
    couchdb: 5984
};
exports.DatabaseTypeToProtocol = {
    valkey: 'redis',
    postgres: 'postgres',
    mariadb: 'mysql',
    clickhouse: 'clickhouse',
    couchdb: 'https'
};
/**
 * @typedef {object} DatabaseOpts
 * @property {string} [username] - The username for the database
 * @property {string} [password] - The password for the database
 * @property {string} [rootPassword] - The root password for the database
 * @property {string} [database] - The database name
 */
/**
 * Create a database instance if it does not exists
 * and return the connection URL.
 *
 * @param {DatabaseType} type The type of the database.
 * @param {string} name The name of the database instance.
 * @param {DatabaseOpts} opts The options for the database.
 * @returns The connection URL for the database.
 *
 * @example
 * import { setupDatabase } from '@osaas/client-db';
 * import Redis from 'ioredis';
 *
 * const dbUrl = await setupDatabase('valkey', 'myvalkey', { password: 'secret' });
 * const client = new Redis(dbUrl);
 * try {
 *   await client.subscribe('messages');
 *   console.log('Waiting for messages...');
 *   client.on('message', (channel, message) => {
 *     console.log(`Received message: ${message} from ${channel}`);
 *   });
 * } catch (err) {
 *   console.error('Error:', err);
 * }
 */
async function setupDatabase(type, name, opts) {
    const ctx = new client_core_1.Context();
    let instance;
    switch (type) {
        case 'valkey':
            instance = await (0, client_services_1.getValkeyIoValkeyInstance)(ctx, name);
            break;
        case 'postgres':
            instance = await (0, client_services_1.getBirmeOscPostgresqlInstance)(ctx, name);
            break;
        case 'mariadb':
            instance = await (0, client_services_1.getLinuxserverDockerMariadbInstance)(ctx, name);
            break;
        case 'clickhouse':
            instance = await (0, client_services_1.getClickhouseClickhouseInstance)(ctx, name);
            break;
        case 'couchdb':
            instance = await (0, client_services_1.getApacheCouchdbInstance)(ctx, name);
            break;
        default:
            throw new Error(`Unsupported database type: ${type}`);
    }
    if (!instance) {
        switch (type) {
            case 'valkey':
                {
                    const options = {
                        name,
                        Password: opts.password
                    };
                    instance = await (0, client_services_1.createValkeyIoValkeyInstance)(ctx, options);
                }
                break;
            case 'postgres':
                {
                    if (!opts.password) {
                        throw new Error('Password is required for postgres');
                    }
                    const options = {
                        name,
                        PostgresUser: opts.username,
                        PostgresPassword: opts.password,
                        PostgresDb: opts.database
                    };
                    instance = await (0, client_services_1.createBirmeOscPostgresqlInstance)(ctx, options);
                }
                break;
            case 'mariadb':
                {
                    if (!opts.rootPassword) {
                        throw new Error('Root password is required for mariadb');
                    }
                    const options = {
                        name,
                        RootPassword: opts.rootPassword,
                        Database: opts.database,
                        User: opts.username,
                        Password: opts.password
                    };
                    instance = await (0, client_services_1.createLinuxserverDockerMariadbInstance)(ctx, options);
                }
                break;
            case 'clickhouse':
                {
                    const options = {
                        name,
                        Password: opts.password,
                        User: opts.username,
                        Db: opts.database
                    };
                    instance = await (0, client_services_1.createClickhouseClickhouseInstance)(ctx, options);
                }
                break;
            case 'couchdb':
                {
                    if (!opts.rootPassword) {
                        throw new Error('Root password is required for couchdb');
                    }
                    const options = {
                        name,
                        AdminPassword: opts.rootPassword
                    };
                    instance = await (0, client_services_1.createApacheCouchdbInstance)(ctx, options);
                }
                break;
            default:
                throw new Error(`Unsupported database type: ${type}`);
        }
    }
    switch (type) {
        case 'valkey':
        case 'postgres':
        case 'mariadb': {
            const token = await ctx.getServiceAccessToken(exports.DatabaseTypeToServiceId[type]);
            const ports = await (0, client_core_1.getPortsForInstance)(ctx, exports.DatabaseTypeToServiceId[type], name, token);
            const port = ports.find((p) => p.internalPort === exports.DatabaseTypeToPort[type]);
            if (port) {
                return `${exports.DatabaseTypeToProtocol[type]}://${opts.username || 'default'}${opts.password ? ':' + opts.password : ''}@${port.externalIp}:${port.externalPort}`;
            }
            throw new Error('Failed to get connection URL for database');
        }
        case 'couchdb': {
            const url = new URL(instance.url);
            url.password = instance.AdminPassword;
            url.username = 'admin';
            return url.toString();
        }
        case 'clickhouse': {
            const url = new URL(instance.url);
            url.username = opts.username || 'default';
            url.password = opts.password || '';
            return url.toString();
        }
        default:
            throw new Error(`Unsupported database type: ${type}`);
    }
}
exports.setupDatabase = setupDatabase;
//# sourceMappingURL=index.js.map