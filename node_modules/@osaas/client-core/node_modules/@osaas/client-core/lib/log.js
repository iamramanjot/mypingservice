"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Log = exports.Logger = void 0;
const chalk_1 = __importDefault(require("chalk"));
const util_1 = __importDefault(require("util"));
let logger_;
const LEVELS = {
    info: { text: 'info', method: 'info', color: 'white' },
    error: { text: 'error', method: 'error', color: 'red' },
    warn: { text: 'warn', method: 'info', color: 'yellow' },
    debug: { text: 'debug', method: 'info', color: 'blue' },
    fatal: { text: 'fatal', method: 'error', color: 'redBright' }
};
function log(method) {
    switch (method) {
        case 'info':
            return console.info;
        case 'error':
            return console.error;
        default:
            throw new Error(`Invalid log method ${method}`);
    }
}
function logfmt(levelCode, ...args) {
    const level = LEVELS[levelCode];
    if (levelCode == 'debug') {
        log(level.method)(...args);
    }
    else {
        const msg = util_1.default.format(...args);
        log(level.method)(chalk_1.default[level.color](msg));
    }
}
class Logger {
    debugMode = false;
    constructor() {
        return this;
    }
    info(...args) {
        logfmt('info', ...args);
        return this;
    }
    warn(...args) {
        logfmt('warn', ...args);
        return this;
    }
    error(...args) {
        logfmt('error', ...args);
        return this;
    }
    debug(...args) {
        if (this.debugMode)
            logfmt('debug', ...args);
        return this;
    }
    fatal(...args) {
        logfmt('fatal', ...args);
        return this;
    }
    get level() {
        return this.debugMode ? 'debug' : 'info';
    }
    set level(value) {
        if (value == 'debug') {
            this.debugMode = true;
        }
        else if (value == 'info') {
            this.debugMode = false;
        }
        else {
            this.warn('level', value, 'not supported');
        }
    }
}
exports.Logger = Logger;
function Log() {
    if (logger_) {
        return logger_;
    }
    logger_ = new Logger();
    logger_.level = 'info';
    if (process.env.DEBUG) {
        logger_.level = 'debug';
    }
    return logger_;
}
exports.Log = Log;
//# sourceMappingURL=log.js.map