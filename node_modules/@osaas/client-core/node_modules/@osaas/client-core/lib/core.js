"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listInstances = exports.getInstance = exports.removeInstance = exports.createInstance = void 0;
const fetch_1 = require("./fetch");
async function getService(context, serviceId) {
    const serviceUrl = new URL(`https://catalog.svc.${context.getEnvironment()}.osaas.io/mysubscriptions`);
    const services = await (0, fetch_1.createFetch)(serviceUrl, {
        method: 'GET',
        headers: {
            'x-pat-jwt': `Bearer ${context.getPersonalAccessToken()}`,
            'Content-Type': 'application/json'
        }
    });
    const service = services.find((svc) => svc.serviceId === serviceId);
    if (!service) {
        throw new Error(`Service ${serviceId} not found in your subscriptions`);
    }
    return service;
}
async function createInstance(context, serviceId, token, body) {
    const service = await getService(context, serviceId);
    const instanceUrl = new URL(service.apiUrl);
    const instance = await (0, fetch_1.createFetch)(instanceUrl, {
        method: 'POST',
        body: JSON.stringify(body),
        headers: {
            'x-jwt': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    });
    return instance;
}
exports.createInstance = createInstance;
async function removeInstance(context, serviceId, name, token) {
    const service = await getService(context, serviceId);
    const instanceUrl = new URL(service.apiUrl + '/' + name);
    await (0, fetch_1.createFetch)(instanceUrl, {
        method: 'DELETE',
        headers: {
            'x-jwt': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    });
}
exports.removeInstance = removeInstance;
async function getInstance(context, serviceId, name, token) {
    const service = await getService(context, serviceId);
    const instanceUrl = new URL(service.apiUrl + '/' + name);
    return await (0, fetch_1.createFetch)(instanceUrl, {
        method: 'GET',
        headers: {
            'x-jwt': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    });
}
exports.getInstance = getInstance;
async function listInstances(context, serviceId, token) {
    const service = await getService(context, serviceId);
    const instanceUrl = new URL(service.apiUrl);
    return await (0, fetch_1.createFetch)(instanceUrl, {
        method: 'GET',
        headers: {
            'x-jwt': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    });
}
exports.listInstances = listInstances;
//# sourceMappingURL=core.js.map