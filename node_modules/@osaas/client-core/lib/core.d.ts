import { Context, Service } from './context';
export declare function getService(context: Context, serviceId: string): Promise<Service>;
export declare const isValidInstanceName: (name: string) => boolean;
export type Port = {
    externalIp: string;
    externalPort: number;
    internalPort: number;
};
/**
 * @typedef ServiceInstance
 * @type object
 * @property {string} name - Service instance name
 * @property {string} url - Service instance URL
 * @property ... - Service specific properties
 */
/**
 * Create a new instance of a service in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} token - Service access token
 * @param {object} body - Service instance options. The options are service specific
 * @returns {ServiceInstance} - Service instance
 * @example
 * import { Context, createInstance } from '@osaas/client-core';
 *
 * const ctx = new Context();
 * const sat = await ctx.getServiceAccessToken('eyevinn-test-adserver');
 * const instance = await createInstance(ctx, 'eyevinn-test-adserver', sat, { name: 'my-instance' });
 * console.log(instance.url);
 */
export declare function createInstance(context: Context, serviceId: string, token: string, body: any): Promise<any>;
/**
 * Remove an instance of a service in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - The service identifier
 * @param {string} name - The name of the service instance to remove
 * @param {string} token - Service access token
 * @example
 * import { Context, removeInstance } from '@osaas/client-core';
 * const ctx = new Context();
 * const sat = await ctx.getServiceAccessToken('eyevinn-test-adserver');
 * await removeInstance(ctx, 'eyevinn-test-adserver', 'my-instance', sat);
 */
export declare function removeInstance(context: Context, serviceId: string, name: string, token: string): Promise<void>;
/**
 * Retrieve an instance of a service in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - The service identifier
 * @param {string} name - The name of the service instance to remove
 * @param {string} token - Service access token
 * @returns {ServiceInstance} - Service instance
 */
export declare function getInstance(context: Context, serviceId: string, name: string, token: string): Promise<any>;
/**
 * List all instances of a service in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - The service identifier
 * @param {string} token - Service access token
 * @returns {Array.<ServiceInstance>} - List of instances
 */
export declare function listInstances(context: Context, serviceId: string, token: string): Promise<any>;
/**
 * List all extra TCP ports routed to an instance in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - The service identifier
 * @param {string} name - The name of the service instance
 * @param {string} token - Service access token
 * @returns {Array.<Port>} - List of ports
 */
export declare function getPortsForInstance(context: Context, serviceId: string, name: string, token: string): Promise<Port[]>;
export declare function getLogsForInstance(context: Context, serviceId: string, name: string, token: string): Promise<string[]>;
export declare function getInstanceHealth(context: Context, serviceId: string, name: string, token: string): Promise<string>;
export declare function instanceValue(instance: {
    [key: string]: string;
}, key: string): string;
export declare function valueOrSecret(value: string): string;
export declare function waitForInstanceReady(serviceId: string, name: string, ctx: Context): Promise<void>;
//# sourceMappingURL=core.d.ts.map