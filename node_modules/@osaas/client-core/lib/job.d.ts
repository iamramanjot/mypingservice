import { Context } from './context';
/**
 * @typedef ServiceJob
 * @type object
 * @property {string} name - Service job name
 * @property ... - Service specific job properties
 */
/**
 * Create a new service job in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} token - Service access token
 * @param {object} body - Service job options. The options are service specific
 * @returns {ServiceJob} - Service job. The job is specific to the service
 * @example
 * import { Context, createJob } from '@osaas/client-core';
 * const serviceAccessToken = await ctx.getServiceAccessToken(
 *  'eyevinn-docker-retransfer'
 * );
 * const job = await createJob(
 *   ctx,
 *   'eyevinn-docker-retransfer',
 *   serviceAccessToken,
 *   {
 *     name: 'example',
 *     awsAccessKeyId: process.env.AWS_ACCESS_KEY_ID,
 *     awsSecretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
 *     cmdLineArgs: 's3://source/myfile.txt s3://dest/'
 *   }
 * );
 */
export declare function createJob(context: Context, serviceId: string, token: string, body: any): Promise<any>;
/**
 * Remove a service job in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} name - Name of service job to remove
 * @param {string} token - Service access token
 */
export declare function removeJob(context: Context, serviceId: string, name: string, token: string): Promise<void>;
/**
 * Get a service job in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} name - Name of service job to read
 * @param {string} token - Service access token
 */
export declare function getJob(context: Context, serviceId: string, name: string, token: string): Promise<any>;
/**
 * List service jobs in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} token - Service access token
 */
export declare function listJobs(context: Context, serviceId: string, token: string): Promise<any>;
/**
 * Wait for a service job to complete
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} name - Name of service job to wait for
 * @param {string} token - Service access token
 */
export declare function waitForJobToComplete(context: Context, serviceId: string, name: string, token: string): Promise<void>;
//# sourceMappingURL=job.d.ts.map