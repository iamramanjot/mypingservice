"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remakeOrder = exports.getOrderIdByName = void 0;
const errors_1 = require("../errors");
const fetch_1 = require("../fetch");
const log_1 = require("../log");
async function getOrderIdByName(platform, orderName) {
    try {
        const makerUrl = new URL(`https://maker.svc.${platform.getEnvironment()}.osaas.io/maker`);
        makerUrl.searchParams.append('name', orderName);
        const res = await (0, fetch_1.createFetch)(makerUrl, {
            headers: {
                Authorization: `Bearer ${platform.getApiKey()}`,
                'Content-Type': 'application/json'
            }
        });
        if (res[0]) {
            return res[0].order.orderId;
        }
        return undefined;
    }
    catch (err) {
        (0, log_1.Log)().debug(err);
        if (err instanceof fetch_1.FetchError && err.httpCode === 401) {
            throw new errors_1.UnauthorizedError();
        }
        else if (err instanceof fetch_1.FetchError && err.httpCode === 404) {
            return undefined;
        }
    }
}
exports.getOrderIdByName = getOrderIdByName;
async function remakeOrder(platform, orderId) {
    try {
        const remakerUrl = new URL(`https://maker.svc.${platform.getEnvironment()}.osaas.io/remaker`);
        const res = await (0, fetch_1.createFetch)(remakerUrl, {
            method: 'POST',
            headers: {
                Authorization: `Bearer ${platform.getApiKey()}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ orderId })
        });
        (0, log_1.Log)().debug(res);
        return res.orderId;
    }
    catch (err) {
        (0, log_1.Log)().debug(err);
        if (err instanceof fetch_1.FetchError && err.httpCode === 401) {
            throw new errors_1.UnauthorizedError();
        }
        else if (err instanceof fetch_1.FetchError && err.httpCode === 404) {
            return undefined;
        }
    }
    return undefined;
}
exports.remakeOrder = remakeOrder;
//# sourceMappingURL=maker.js.map