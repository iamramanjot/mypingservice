"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForJobToComplete = exports.listJobs = exports.getJob = exports.removeJob = exports.createJob = void 0;
const core_1 = require("./core");
const MAX_ITER = 1000;
const delay = (ms) => new Promise((res) => setTimeout(res, ms));
/**
 * @typedef ServiceJob
 * @type object
 * @property {string} name - Service job name
 * @property ... - Service specific job properties
 */
/**
 * Create a new service job in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} token - Service access token
 * @param {object} body - Service job options. The options are service specific
 * @returns {ServiceJob} - Service job. The job is specific to the service
 * @example
 * import { Context, createJob } from '@osaas/client-core';
 * const serviceAccessToken = await ctx.getServiceAccessToken(
 *  'eyevinn-docker-retransfer'
 * );
 * const job = await createJob(
 *   ctx,
 *   'eyevinn-docker-retransfer',
 *   serviceAccessToken,
 *   {
 *     name: 'example',
 *     awsAccessKeyId: process.env.AWS_ACCESS_KEY_ID,
 *     awsSecretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
 *     cmdLineArgs: 's3://source/myfile.txt s3://dest/'
 *   }
 * );
 */
async function createJob(context, serviceId, token, body) {
    const service = await (0, core_1.getService)(context, serviceId);
    if (service.serviceType !== 'job') {
        throw new Error('Service is not a job service');
    }
    return await (0, core_1.createInstance)(context, serviceId, token, body);
}
exports.createJob = createJob;
/**
 * Remove a service job in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} name - Name of service job to remove
 * @param {string} token - Service access token
 */
async function removeJob(context, serviceId, name, token) {
    const service = await (0, core_1.getService)(context, serviceId);
    if (service.serviceType !== 'job') {
        throw new Error('Service is not a job service');
    }
    return await (0, core_1.removeInstance)(context, serviceId, name, token);
}
exports.removeJob = removeJob;
/**
 * Get a service job in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} name - Name of service job to read
 * @param {string} token - Service access token
 */
async function getJob(context, serviceId, name, token) {
    const service = await (0, core_1.getService)(context, serviceId);
    if (service.serviceType !== 'job') {
        throw new Error('Service is not a job service');
    }
    return await (0, core_1.getInstance)(context, serviceId, name, token);
}
exports.getJob = getJob;
/**
 * List service jobs in Open Source Cloud
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} token - Service access token
 */
async function listJobs(context, serviceId, token) {
    const service = await (0, core_1.getService)(context, serviceId);
    if (service.serviceType !== 'job') {
        throw new Error('Service is not a job service');
    }
    return await (0, core_1.listInstances)(context, serviceId, token);
}
exports.listJobs = listJobs;
/**
 * Wait for a service job to complete
 * @memberof module:@osaas/client-core
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} serviceId - Service identifier. The service identifier is {github-organization}-{github-repo}
 * @param {string} name - Name of service job to wait for
 * @param {string} token - Service access token
 */
async function waitForJobToComplete(context, serviceId, name, token) {
    for (const _ of Array(MAX_ITER)) {
        const job = await getJob(context, serviceId, name, token);
        if (job.status === 'Complete') {
            break;
        }
        await delay(1000);
    }
}
exports.waitForJobToComplete = waitForJobToComplete;
//# sourceMappingURL=job.js.map