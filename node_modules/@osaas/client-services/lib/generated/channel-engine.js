"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChannelEngineInstance = exports.removeChannelEngineInstance = exports.createChannelEngineInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace channel-engine
 * @description Based on VOD2Live Technology you can generate a numerous amounts of FAST channels with a fraction of energy consumption compared to live transcoded FAST channels
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-FAST-Channel-Engine.html|Online docs} for further information
 */
/**
 * @typedef {Object} ChannelEngineConfig
 * @property {string} name - Enter channel name
 * @property {enum} type - Plugin type
 * @property {string} url - URL of VOD, playlist to loop or WebHook
 * @property {boolean} [opts.useDemuxedAudio] - Use demuxed audio
 * @property {boolean} [opts.useVttSubtitles] - Use VTT subtitles
 * @property {string} [opts.defaultSlateUri] - URI to default slate
 * @property {list} [opts.langList] - Comma separated list of languages
 * @property {list} [opts.langListSubs] - Comma separated list of subtitle languages
 * @property {enum} [opts.preset] - Channel preset
 * @property {string} [opts.preroll.url] - URL to preroll
 * @property {string} [opts.preroll.duration] - Duration of preroll in milliseconds
 * @property {string} [opts.webhook.apikey] - WebHook api key

 *
 */
/**
 * @typedef {Object} ChannelEngine
 * @property {string} name - Name of the FAST Channel Engine instance
 * @property {string} url - URL of the FAST Channel Engine instance
 *
 */
/**
 * Create a new FAST Channel Engine instance
 *
 * @memberOf channel-engine
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {ChannelEngineConfig} body - Service instance configuration
 * @returns {ChannelEngine} - Service instance
 * @example
 * import { Context, createChannelEngineInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createChannelEngineInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createChannelEngineInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('channel-engine');
    const instance = await (0, client_core_1.createInstance)(ctx, 'channel-engine', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('channel-engine', instance.name, ctx);
    return instance;
}
exports.createChannelEngineInstance = createChannelEngineInstance;
/**
 * Remove a FAST Channel Engine instance
 *
 * @memberOf channel-engine
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the channel to be removed
 */
async function removeChannelEngineInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('channel-engine');
    await (0, client_core_1.removeInstance)(ctx, 'channel-engine', name, serviceAccessToken);
}
exports.removeChannelEngineInstance = removeChannelEngineInstance;
/**
 * Get a FAST Channel Engine instance
 *
 * @memberOf channel-engine
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the channel to be retrieved
 * @returns {ChannelEngine} - Service instance
 */
async function getChannelEngineInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('channel-engine');
    return await (0, client_core_1.getInstance)(ctx, 'channel-engine', name, serviceAccessToken);
}
exports.getChannelEngineInstance = getChannelEngineInstance;
//# sourceMappingURL=channel-engine.js.map