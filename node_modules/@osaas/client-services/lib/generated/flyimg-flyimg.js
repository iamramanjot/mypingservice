"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFlyimgFlyimgInstance = exports.removeFlyimgFlyimgInstance = exports.createFlyimgFlyimgInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace flyimg-flyimg
 * @description An application that allows you to resize, crop, and compress images on the fly.

By default, Flyimg generates the AVIF image format (when the browser supports it) which provides superior compression compared to other formats.

Additionally, Flyimg also generates the WebP format, along with the impressive MozJPEG compression algorithm to optimize images, other formats are supported also such as PNG and GIF.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://github.com/flyimg/flyimg|Online docs} for further information
 */
/**
 * @typedef {Object} FlyimgFlyimgConfig
 * @property {string} name - Name of flyimg

 *
 */
/**
 * @typedef {Object} FlyimgFlyimg
 * @property {string} name - Name of the flyimg instance
 * @property {string} url - URL of the flyimg instance
 *
 */
/**
 * Create a new flyimg instance
 *
 * @memberOf flyimg-flyimg
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {FlyimgFlyimgConfig} body - Service instance configuration
 * @returns {FlyimgFlyimg} - Service instance
 * @example
 * import { Context, createFlyimgFlyimgInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createFlyimgFlyimgInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createFlyimgFlyimgInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('flyimg-flyimg');
    const instance = await (0, client_core_1.createInstance)(ctx, 'flyimg-flyimg', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('flyimg-flyimg', instance.name, ctx);
    return instance;
}
exports.createFlyimgFlyimgInstance = createFlyimgFlyimgInstance;
/**
 * Remove a flyimg instance
 *
 * @memberOf flyimg-flyimg
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the flyimg to be removed
 */
async function removeFlyimgFlyimgInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('flyimg-flyimg');
    await (0, client_core_1.removeInstance)(ctx, 'flyimg-flyimg', name, serviceAccessToken);
}
exports.removeFlyimgFlyimgInstance = removeFlyimgFlyimgInstance;
/**
 * Get a flyimg instance
 *
 * @memberOf flyimg-flyimg
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the flyimg to be retrieved
 * @returns {FlyimgFlyimg} - Service instance
 */
async function getFlyimgFlyimgInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('flyimg-flyimg');
    return await (0, client_core_1.getInstance)(ctx, 'flyimg-flyimg', name, serviceAccessToken);
}
exports.getFlyimgFlyimgInstance = getFlyimgFlyimgInstance;
//# sourceMappingURL=flyimg-flyimg.js.map