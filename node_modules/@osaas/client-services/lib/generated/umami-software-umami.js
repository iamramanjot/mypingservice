"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUmamiSoftwareUmamiInstance = exports.removeUmamiSoftwareUmamiInstance = exports.createUmamiSoftwareUmamiInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace umami-software-umami
 * @description Discover Umami, the fast and privacy-centric analytics tool! It's the perfect simple alternative to Google Analytics. Experience seamless data insights without compromising user privacy.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} UmamiSoftwareUmamiConfig
 * @property {string} name - Name of umami
 * @property {string} PostgresDbUrl - PostgresDbUrl

 *
 */
/**
 * @typedef {Object} UmamiSoftwareUmami
 * @property {string} name - Name of the Umami instance
 * @property {string} url - URL of the Umami instance
 *
 */
/**
 * Create a new Umami instance
 *
 * @memberOf umami-software-umami
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {UmamiSoftwareUmamiConfig} body - Service instance configuration
 * @returns {UmamiSoftwareUmami} - Service instance
 * @example
 * import { Context, createUmamiSoftwareUmamiInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createUmamiSoftwareUmamiInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createUmamiSoftwareUmamiInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('umami-software-umami');
    const instance = await (0, client_core_1.createInstance)(ctx, 'umami-software-umami', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('umami-software-umami', instance.name, ctx);
    return instance;
}
exports.createUmamiSoftwareUmamiInstance = createUmamiSoftwareUmamiInstance;
/**
 * Remove a Umami instance
 *
 * @memberOf umami-software-umami
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the umami to be removed
 */
async function removeUmamiSoftwareUmamiInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('umami-software-umami');
    await (0, client_core_1.removeInstance)(ctx, 'umami-software-umami', name, serviceAccessToken);
}
exports.removeUmamiSoftwareUmamiInstance = removeUmamiSoftwareUmamiInstance;
/**
 * Get a Umami instance
 *
 * @memberOf umami-software-umami
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the umami to be retrieved
 * @returns {UmamiSoftwareUmami} - Service instance
 */
async function getUmamiSoftwareUmamiInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('umami-software-umami');
    return await (0, client_core_1.getInstance)(ctx, 'umami-software-umami', name, serviceAccessToken);
}
exports.getUmamiSoftwareUmamiInstance = getUmamiSoftwareUmamiInstance;
//# sourceMappingURL=umami-software-umami.js.map