/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/': {
        /** Say hello */
        get: {
            responses: {
                /** The magical words! */
                200: {
                    schema: string;
                };
            };
        };
    };
    '/slimserverinstance': {
        /** List all running slimserver instances */
        get: {
            responses: {
                /** Default Response */
                200: {
                    schema: {
                        /** @description Name of the slimserver instance */
                        name: string;
                        /** @description URL to instance API */
                        url: string;
                        resources: {
                            license: {
                                /** @description URL to license information */
                                url: string;
                            };
                            apiDocs?: {
                                /** @description URL to instance API documentation */
                                url: string;
                            };
                            app?: {
                                /** @description URL to instance application (GUI) */
                                url: string;
                            };
                        };
                        MusicBucketUrl?: string;
                        S3EndpointUrl?: string;
                        S3AccessKeyId?: string;
                        S3SecretAccessKey?: string;
                        S3Region?: string;
                    }[];
                };
                /** Default Response */
                500: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
            };
        };
        /** Launch a new slimserver instance */
        post: {
            parameters: {
                body: {
                    body?: {
                        /** @description Name of the slimserver instance */
                        name: string;
                        MusicBucketUrl?: string;
                        S3EndpointUrl?: string;
                        S3AccessKeyId?: string;
                        S3SecretAccessKey?: string;
                        S3Region?: string;
                    };
                };
            };
            responses: {
                /** Default Response */
                200: {
                    schema: {
                        /** @description Name of the slimserver instance */
                        name: string;
                        /** @description URL to instance API */
                        url: string;
                        resources: {
                            license: {
                                /** @description URL to license information */
                                url: string;
                            };
                            apiDocs?: {
                                /** @description URL to instance API documentation */
                                url: string;
                            };
                            app?: {
                                /** @description URL to instance application (GUI) */
                                url: string;
                            };
                        };
                        MusicBucketUrl?: string;
                        S3EndpointUrl?: string;
                        S3AccessKeyId?: string;
                        S3SecretAccessKey?: string;
                        S3Region?: string;
                    };
                };
                /** Default Response */
                403: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
                /** Default Response */
                409: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
                /** Default Response */
                500: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
            };
        };
    };
    '/slimserverinstance/{id}': {
        /** Obtain status and resource URLs for an slimserver instance */
        get: {
            parameters: {
                path: {
                    /** Name of the slimserver instance */
                    id: string;
                };
            };
            responses: {
                /** Default Response */
                200: {
                    schema: {
                        /** @description Name of the slimserver instance */
                        name: string;
                        /** @description URL to instance API */
                        url: string;
                        resources: {
                            license: {
                                /** @description URL to license information */
                                url: string;
                            };
                            apiDocs?: {
                                /** @description URL to instance API documentation */
                                url: string;
                            };
                            app?: {
                                /** @description URL to instance application (GUI) */
                                url: string;
                            };
                        };
                        MusicBucketUrl?: string;
                        S3EndpointUrl?: string;
                        S3AccessKeyId?: string;
                        S3SecretAccessKey?: string;
                        S3Region?: string;
                    };
                };
                /** Default Response */
                404: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
                /** Default Response */
                500: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
            };
        };
        /** Stop and remove an slimserver instance */
        delete: {
            parameters: {
                path: {
                    /** Name of the slimserver instance */
                    id: string;
                };
            };
            responses: {
                /** Default Response */
                204: {
                    schema: string;
                };
                /** Default Response */
                500: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
            };
        };
    };
    '/health/{id}': {
        /** Return status of slimserver instance */
        get: {
            parameters: {
                path: {
                    /** Name of the slimserver instance */
                    id: string;
                };
            };
            responses: {
                /** Default Response */
                200: {
                    schema: {
                        /** @enum {string} */
                        status: 'starting' | 'running' | 'stopped' | 'failed' | 'unknown';
                    };
                };
                /** Default Response */
                500: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
            };
        };
    };
    '/logs/{id}': {
        /** Return the latest logs from the slimserver instance */
        get: {
            parameters: {
                query: {
                    timestamps?: boolean;
                    sinceSeconds?: number;
                };
                path: {
                    /** Name of the slimserver instance */
                    id: string;
                };
            };
            responses: {
                /** Default Response */
                200: {
                    schema: string;
                };
                /** Default Response */
                500: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
            };
        };
    };
    '/ports/{id}': {
        /** Return the exposed extra ports for slimserver instance */
        get: {
            parameters: {
                path: {
                    /** Name of the slimserver instance */
                    id: string;
                };
            };
            responses: {
                /** Default Response */
                200: {
                    schema: {
                        externalIp: string;
                        externalPort: number;
                        internalPort: number;
                    }[];
                };
                /** Default Response */
                500: {
                    schema: {
                        /** @description Reason why something failed */
                        reason: string;
                    };
                };
            };
        };
    };
}
export interface definitions {
}
export interface operations {
}
export interface external {
}
export type LmsCommunitySlimserver = paths['/slimserverinstance/{id}']['get']['responses']['200']['schema'];
export type LmsCommunitySlimserverConfig = paths['/slimserverinstance']['post']['parameters']['body']['body'];
import { Context } from '@osaas/client-core';
/**
 * @namespace lms-community-slimserver
 * @description Experience the ultimate audio streaming solution with Lyrion Music Server. Effortlessly stream local and internet music to any device, transforming your listening experience across platforms like Windows, macOS, and Linux.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} LmsCommunitySlimserverConfig
 * @property {string} name - Name of slimserver
 * @property {string} [MusicBucketUrl] - MusicBucketUrl
 * @property {string} [S3EndpointUrl] - S3EndpointUrl
 * @property {string} [S3AccessKeyId] - S3AccessKeyId
 * @property {string} [S3SecretAccessKey] - S3SecretAccessKey
 * @property {string} [S3Region] - S3Region

 *
 */
/**
 * @typedef {Object} LmsCommunitySlimserver
 * @property {string} name - Name of the Lyrion Music Server instance
 * @property {string} url - URL of the Lyrion Music Server instance
 *
 */
/**
 * Create a new Lyrion Music Server instance
 *
 * @memberOf lms-community-slimserver
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {LmsCommunitySlimserverConfig} body - Service instance configuration
 * @returns {LmsCommunitySlimserver} - Service instance
 * @example
 * import { Context, createLmsCommunitySlimserverInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createLmsCommunitySlimserverInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
export declare function createLmsCommunitySlimserverInstance(ctx: Context, body: LmsCommunitySlimserverConfig): Promise<LmsCommunitySlimserver>;
/**
 * Remove a Lyrion Music Server instance
 *
 * @memberOf lms-community-slimserver
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the slimserver to be removed
 */
export declare function removeLmsCommunitySlimserverInstance(ctx: Context, name: string): Promise<void>;
/**
 * Get a Lyrion Music Server instance
 *
 * @memberOf lms-community-slimserver
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the slimserver to be retrieved
 * @returns {LmsCommunitySlimserver} - Service instance
 */
export declare function getLmsCommunitySlimserverInstance(ctx: Context, name: string): Promise<LmsCommunitySlimserver>;
//# sourceMappingURL=lms-community-slimserver.d.ts.map