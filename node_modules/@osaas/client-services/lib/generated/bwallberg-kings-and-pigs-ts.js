"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBwallbergKingsAndPigsTsInstance = exports.removeBwallbergKingsAndPigsTsInstance = exports.createBwallbergKingsAndPigsTsInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace bwallberg-kings-and-pigs-ts
 * @description Dive into Kings and Pigs, a vibrant 2D TypeScript game! Explore custom ECS architecture & physics with Planck.js. Perfect for TypeScript learners & game enthusiasts. Play now!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} BwallbergKingsAndPigsTsConfig
 * @property {string} name - Name of kings-and-pigs-ts

 *
 */
/**
 * @typedef {Object} BwallbergKingsAndPigsTs
 * @property {string} name - Name of the Kings and Pigs instance
 * @property {string} url - URL of the Kings and Pigs instance
 *
 */
/**
 * Create a new Kings and Pigs instance
 *
 * @memberOf bwallberg-kings-and-pigs-ts
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {BwallbergKingsAndPigsTsConfig} body - Service instance configuration
 * @returns {BwallbergKingsAndPigsTs} - Service instance
 * @example
 * import { Context, createBwallbergKingsAndPigsTsInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createBwallbergKingsAndPigsTsInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createBwallbergKingsAndPigsTsInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('bwallberg-kings-and-pigs-ts');
    const instance = await (0, client_core_1.createInstance)(ctx, 'bwallberg-kings-and-pigs-ts', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('bwallberg-kings-and-pigs-ts', instance.name, ctx);
    return instance;
}
exports.createBwallbergKingsAndPigsTsInstance = createBwallbergKingsAndPigsTsInstance;
/**
 * Remove a Kings and Pigs instance
 *
 * @memberOf bwallberg-kings-and-pigs-ts
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the kings-and-pigs-ts to be removed
 */
async function removeBwallbergKingsAndPigsTsInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('bwallberg-kings-and-pigs-ts');
    await (0, client_core_1.removeInstance)(ctx, 'bwallberg-kings-and-pigs-ts', name, serviceAccessToken);
}
exports.removeBwallbergKingsAndPigsTsInstance = removeBwallbergKingsAndPigsTsInstance;
/**
 * Get a Kings and Pigs instance
 *
 * @memberOf bwallberg-kings-and-pigs-ts
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the kings-and-pigs-ts to be retrieved
 * @returns {BwallbergKingsAndPigsTs} - Service instance
 */
async function getBwallbergKingsAndPigsTsInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('bwallberg-kings-and-pigs-ts');
    return await (0, client_core_1.getInstance)(ctx, 'bwallberg-kings-and-pigs-ts', name, serviceAccessToken);
}
exports.getBwallbergKingsAndPigsTsInstance = getBwallbergKingsAndPigsTsInstance;
//# sourceMappingURL=bwallberg-kings-and-pigs-ts.js.map