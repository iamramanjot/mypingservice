"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMinioMinioInstance = exports.removeMinioMinioInstance = exports.createMinioMinioInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace minio-minio
 * @description MinIO is the High Performance Object Storage solution you've been searching for! API compatible with Amazon S3, it's perfect for machine learning, analytics, and app data workloads. Easy container installation with stable podman run commands. Mac, Linux, Windows support available for simple standalone server setup. Explore further with MinIO SDKs and contribute to the MinIO Project. Get your MinIO now and revolutionize your storage game!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-MinIO.html|Online docs} for further information
 */
/**
 * @typedef {Object} MinioMinioConfig
 * @property {string} name - Name of minio
 * @property {string} [RootUser] - RootUser
 * @property {string} [RootPassword] - RootPassword

 *
 */
/**
 * @typedef {Object} MinioMinio
 * @property {string} name - Name of the minio instance
 * @property {string} url - URL of the minio instance
 *
 */
/**
 * Create a new minio instance
 *
 * @memberOf minio-minio
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {MinioMinioConfig} body - Service instance configuration
 * @returns {MinioMinio} - Service instance
 * @example
 * import { Context, createMinioMinioInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createMinioMinioInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createMinioMinioInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('minio-minio');
    const instance = await (0, client_core_1.createInstance)(ctx, 'minio-minio', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('minio-minio', instance.name, ctx);
    return instance;
}
exports.createMinioMinioInstance = createMinioMinioInstance;
/**
 * Remove a minio instance
 *
 * @memberOf minio-minio
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the objstorage to be removed
 */
async function removeMinioMinioInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('minio-minio');
    await (0, client_core_1.removeInstance)(ctx, 'minio-minio', name, serviceAccessToken);
}
exports.removeMinioMinioInstance = removeMinioMinioInstance;
/**
 * Get a minio instance
 *
 * @memberOf minio-minio
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the objstorage to be retrieved
 * @returns {MinioMinio} - Service instance
 */
async function getMinioMinioInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('minio-minio');
    return await (0, client_core_1.getInstance)(ctx, 'minio-minio', name, serviceAccessToken);
}
exports.getMinioMinioInstance = getMinioMinioInstance;
//# sourceMappingURL=minio-minio.js.map