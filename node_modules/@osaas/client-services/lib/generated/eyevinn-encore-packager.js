"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnEncorePackagerInstance = exports.removeEyevinnEncorePackagerInstance = exports.createEyevinnEncorePackagerInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-encore-packager
 * @description Enhance your transcoding workflow with Encore packager! Run as a service, listen for messages on redis queue, and customize packaging events. Boost productivity with this versatile tool.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} EyevinnEncorePackagerConfig
 * @property {string} name - Name of encore-packager
 * @property {string} RedisUrl - RedisUrl
 * @property {string} [RedisQueue] - RedisQueue
 * @property {string} OutputFolder - OutputFolder
 * @property {string} [Concurrency] - Concurrency
 * @property {string} PersonalAccessToken - PersonalAccessToken
 * @property {string} AwsAccessKeyId - AwsAccessKeyId
 * @property {string} AwsSecretAccessKey - AwsSecretAccessKey
 * @property {string} [AwsRegion] - AwsRegion
 * @property {string} [AwsSessionToken] - AwsSessionToken
 * @property {string} [S3EndpointUrl] - S3EndpointUrl
 * @property {string} [OutputSubfolderTemplate] - OutputSubfolderTemplate

 *
 */
/**
 * @typedef {Object} EyevinnEncorePackager
 * @property {string} name - Name of the Encore Packager instance
 * @property {string} url - URL of the Encore Packager instance
 *
 */
/**
 * Create a new Encore Packager instance
 *
 * @memberOf eyevinn-encore-packager
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnEncorePackagerConfig} body - Service instance configuration
 * @returns {EyevinnEncorePackager} - Service instance
 * @example
 * import { Context, createEyevinnEncorePackagerInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnEncorePackagerInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnEncorePackagerInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-encore-packager');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-encore-packager', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-encore-packager', instance.name, ctx);
    return instance;
}
exports.createEyevinnEncorePackagerInstance = createEyevinnEncorePackagerInstance;
/**
 * Remove a Encore Packager instance
 *
 * @memberOf eyevinn-encore-packager
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the packager to be removed
 */
async function removeEyevinnEncorePackagerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-encore-packager');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-encore-packager', name, serviceAccessToken);
}
exports.removeEyevinnEncorePackagerInstance = removeEyevinnEncorePackagerInstance;
/**
 * Get a Encore Packager instance
 *
 * @memberOf eyevinn-encore-packager
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the packager to be retrieved
 * @returns {EyevinnEncorePackager} - Service instance
 */
async function getEyevinnEncorePackagerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-encore-packager');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-encore-packager', name, serviceAccessToken);
}
exports.getEyevinnEncorePackagerInstance = getEyevinnEncorePackagerInstance;
//# sourceMappingURL=eyevinn-encore-packager.js.map