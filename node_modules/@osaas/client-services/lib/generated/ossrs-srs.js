"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOssrsSrsInstance = exports.removeOssrsSrsInstance = exports.createOssrsSrsInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace ossrs-srs
 * @description Experience high-efficiency video streaming with SRS/6.0. Stream seamlessly with essential features included.
Transform your streaming experience now! Explore RTMP, HLS, HTTP-FLV, SRT, MPEG-DASH protocols, and more.
Get started easily!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} OssrsSrsConfig
 * @property {string} name - Name of srs

 *
 */
/**
 * @typedef {Object} OssrsSrs
 * @property {string} name - Name of the Simple Realtime Server instance
 * @property {string} url - URL of the Simple Realtime Server instance
 *
 */
/**
 * Create a new Simple Realtime Server instance
 *
 * @memberOf ossrs-srs
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {OssrsSrsConfig} body - Service instance configuration
 * @returns {OssrsSrs} - Service instance
 * @example
 * import { Context, createOssrsSrsInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createOssrsSrsInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createOssrsSrsInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('ossrs-srs');
    const instance = await (0, client_core_1.createInstance)(ctx, 'ossrs-srs', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('ossrs-srs', instance.name, ctx);
    return instance;
}
exports.createOssrsSrsInstance = createOssrsSrsInstance;
/**
 * Remove a Simple Realtime Server instance
 *
 * @memberOf ossrs-srs
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the srs to be removed
 */
async function removeOssrsSrsInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('ossrs-srs');
    await (0, client_core_1.removeInstance)(ctx, 'ossrs-srs', name, serviceAccessToken);
}
exports.removeOssrsSrsInstance = removeOssrsSrsInstance;
/**
 * Get a Simple Realtime Server instance
 *
 * @memberOf ossrs-srs
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the srs to be retrieved
 * @returns {OssrsSrs} - Service instance
 */
async function getOssrsSrsInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('ossrs-srs');
    return await (0, client_core_1.getInstance)(ctx, 'ossrs-srs', name, serviceAccessToken);
}
exports.getOssrsSrsInstance = getOssrsSrsInstance;
//# sourceMappingURL=ossrs-srs.js.map