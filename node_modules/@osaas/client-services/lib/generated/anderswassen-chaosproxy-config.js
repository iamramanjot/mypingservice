"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAnderswassenChaosproxyConfigInstance = exports.removeAnderswassenChaosproxyConfigInstance = exports.createAnderswassenChaosproxyConfigInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace anderswassen-chaosproxy-config
 * @description Revolutionize your streaming experience with the Chaos Stream Proxy Configurator! Customize HLS streams with precision-timed delays for enhanced content manipulation and control effortlessly.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} AnderswassenChaosproxyConfigConfig
 * @property {string} name - Name of chaosproxy-config

 *
 */
/**
 * @typedef {Object} AnderswassenChaosproxyConfig
 * @property {string} name - Name of the Chaos Stream Proxy Configurator instance
 * @property {string} url - URL of the Chaos Stream Proxy Configurator instance
 *
 */
/**
 * Create a new Chaos Stream Proxy Configurator instance
 *
 * @memberOf anderswassen-chaosproxy-config
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {AnderswassenChaosproxyConfigConfig} body - Service instance configuration
 * @returns {AnderswassenChaosproxyConfig} - Service instance
 * @example
 * import { Context, createAnderswassenChaosproxyConfigInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createAnderswassenChaosproxyConfigInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createAnderswassenChaosproxyConfigInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('anderswassen-chaosproxy-config');
    const instance = await (0, client_core_1.createInstance)(ctx, 'anderswassen-chaosproxy-config', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('anderswassen-chaosproxy-config', instance.name, ctx);
    return instance;
}
exports.createAnderswassenChaosproxyConfigInstance = createAnderswassenChaosproxyConfigInstance;
/**
 * Remove a Chaos Stream Proxy Configurator instance
 *
 * @memberOf anderswassen-chaosproxy-config
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the configurator to be removed
 */
async function removeAnderswassenChaosproxyConfigInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('anderswassen-chaosproxy-config');
    await (0, client_core_1.removeInstance)(ctx, 'anderswassen-chaosproxy-config', name, serviceAccessToken);
}
exports.removeAnderswassenChaosproxyConfigInstance = removeAnderswassenChaosproxyConfigInstance;
/**
 * Get a Chaos Stream Proxy Configurator instance
 *
 * @memberOf anderswassen-chaosproxy-config
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the configurator to be retrieved
 * @returns {AnderswassenChaosproxyConfig} - Service instance
 */
async function getAnderswassenChaosproxyConfigInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('anderswassen-chaosproxy-config');
    return await (0, client_core_1.getInstance)(ctx, 'anderswassen-chaosproxy-config', name, serviceAccessToken);
}
exports.getAnderswassenChaosproxyConfigInstance = getAnderswassenChaosproxyConfigInstance;
//# sourceMappingURL=anderswassen-chaosproxy-config.js.map