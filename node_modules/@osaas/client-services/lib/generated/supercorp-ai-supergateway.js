"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSupercorpAiSupergatewayInstance = exports.removeSupercorpAiSupergatewayInstance = exports.createSupercorpAiSupergatewayInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace supercorp-ai-supergateway
 * @description Unlock seamless stdio MCP server connectivity with Supergateway! Run servers over SSE effortlessly, ideal for remote access and debugging. Start with one command to deliver powerful, real-time interactions!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} SupercorpAiSupergatewayConfig
 * @property {string} name - Name of supergateway
 * @property {string} McpServer - McpServer
 * @property {string} [EnvVars] - EnvVars

 *
 */
/**
 * @typedef {Object} SupercorpAiSupergateway
 * @property {string} name - Name of the Supergateway instance
 * @property {string} url - URL of the Supergateway instance
 *
 */
/**
 * Create a new Supergateway instance
 *
 * @memberOf supercorp-ai-supergateway
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {SupercorpAiSupergatewayConfig} body - Service instance configuration
 * @returns {SupercorpAiSupergateway} - Service instance
 * @example
 * import { Context, createSupercorpAiSupergatewayInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createSupercorpAiSupergatewayInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createSupercorpAiSupergatewayInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('supercorp-ai-supergateway');
    const instance = await (0, client_core_1.createInstance)(ctx, 'supercorp-ai-supergateway', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('supercorp-ai-supergateway', instance.name, ctx);
    return instance;
}
exports.createSupercorpAiSupergatewayInstance = createSupercorpAiSupergatewayInstance;
/**
 * Remove a Supergateway instance
 *
 * @memberOf supercorp-ai-supergateway
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the supergateway to be removed
 */
async function removeSupercorpAiSupergatewayInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('supercorp-ai-supergateway');
    await (0, client_core_1.removeInstance)(ctx, 'supercorp-ai-supergateway', name, serviceAccessToken);
}
exports.removeSupercorpAiSupergatewayInstance = removeSupercorpAiSupergatewayInstance;
/**
 * Get a Supergateway instance
 *
 * @memberOf supercorp-ai-supergateway
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the supergateway to be retrieved
 * @returns {SupercorpAiSupergateway} - Service instance
 */
async function getSupercorpAiSupergatewayInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('supercorp-ai-supergateway');
    return await (0, client_core_1.getInstance)(ctx, 'supercorp-ai-supergateway', name, serviceAccessToken);
}
exports.getSupercorpAiSupergatewayInstance = getSupercorpAiSupergatewayInstance;
//# sourceMappingURL=supercorp-ai-supergateway.js.map