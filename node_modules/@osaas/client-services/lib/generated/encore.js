"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEncoreInstance = exports.removeEncoreInstance = exports.createEncoreInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace encore
 * @description SVT Encore is an open-source video transcoding system for efficient cloud-based video processing. It offers scalable, automated transcoding to optimize video workflows for various platforms, supporting multiple formats and codecs. With a focus on cost-effectiveness and flexibility, Encore is ideal for broadcasters and content creators needing dynamic scaling and reliable performance in their video production and distribution processes.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-SVT-Encore.html|Online docs} for further information
 */
/**
 * @typedef {Object} EncoreConfig
 * @property {string} name - Name of the Encore instance
 * @property {string} [profilesUrl] - URL pointing to list of transcoding profiles
 * @property {string} [s3AccessKeyId] - S3 Access Key Id
 * @property {string} [s3SecretAccessKey] - S3 Secret Access Key
 * @property {string} [s3SessionToken] - S3 Session Token
 * @property {string} [s3Region] - S3 Region
 * @property {string} [s3Endpoint] - S3 Endpoint

 *
 */
/**
 * @typedef {Object} Encore
 * @property {string} name - Name of the SVT Encore instance
 * @property {string} url - URL of the SVT Encore instance
 *
 */
/**
 * Create a new SVT Encore instance
 *
 * @memberOf encore
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EncoreConfig} body - Service instance configuration
 * @returns {Encore} - Service instance
 * @example
 * import { Context, createEncoreInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEncoreInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEncoreInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('encore');
    const instance = await (0, client_core_1.createInstance)(ctx, 'encore', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('encore', instance.name, ctx);
    return instance;
}
exports.createEncoreInstance = createEncoreInstance;
/**
 * Remove a SVT Encore instance
 *
 * @memberOf encore
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the queue to be removed
 */
async function removeEncoreInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('encore');
    await (0, client_core_1.removeInstance)(ctx, 'encore', name, serviceAccessToken);
}
exports.removeEncoreInstance = removeEncoreInstance;
/**
 * Get a SVT Encore instance
 *
 * @memberOf encore
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the queue to be retrieved
 * @returns {Encore} - Service instance
 */
async function getEncoreInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('encore');
    return await (0, client_core_1.getInstance)(ctx, 'encore', name, serviceAccessToken);
}
exports.getEncoreInstance = getEncoreInstance;
//# sourceMappingURL=encore.js.map