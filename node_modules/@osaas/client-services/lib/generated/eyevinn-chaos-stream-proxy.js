"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnChaosStreamProxyInstance = exports.removeEyevinnChaosStreamProxyInstance = exports.createEyevinnChaosStreamProxyInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-chaos-stream-proxy
 * @description Chaos Stream Proxy is an open-source tool designed to simulate network impairments in video streaming environments. It acts as a proxy between the client and the streaming server, allowing developers and QA engineers to introduce various network conditions such as latency, jitter, and packet loss to test and improve the resilience and performance of streaming applications. This tool is crucial for ensuring a smooth streaming experience under different network scenarios, making it an invaluable asset for optimizing video delivery in real-world conditions.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://eyevinntechnology.medium.com/delivering-flawless-streams-regardless-of-the-challenges-in-network-conditions-e466bad5b83f|Online docs} for further information
 */
/**
 * @typedef {Object} EyevinnChaosStreamProxyConfig
 * @property {string} name - Name of chaos-stream-proxy
 * @property {boolean} [statefulmode] - Statefulmode

 *
 */
/**
 * @typedef {Object} EyevinnChaosStreamProxy
 * @property {string} name - Name of the Chaos Stream Proxy instance
 * @property {string} url - URL of the Chaos Stream Proxy instance
 *
 */
/**
 * Create a new Chaos Stream Proxy instance
 *
 * @memberOf eyevinn-chaos-stream-proxy
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnChaosStreamProxyConfig} body - Service instance configuration
 * @returns {EyevinnChaosStreamProxy} - Service instance
 * @example
 * import { Context, createEyevinnChaosStreamProxyInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnChaosStreamProxyInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnChaosStreamProxyInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-chaos-stream-proxy');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-chaos-stream-proxy', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-chaos-stream-proxy', instance.name, ctx);
    return instance;
}
exports.createEyevinnChaosStreamProxyInstance = createEyevinnChaosStreamProxyInstance;
/**
 * Remove a Chaos Stream Proxy instance
 *
 * @memberOf eyevinn-chaos-stream-proxy
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the chaos-stream-proxy to be removed
 */
async function removeEyevinnChaosStreamProxyInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-chaos-stream-proxy');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-chaos-stream-proxy', name, serviceAccessToken);
}
exports.removeEyevinnChaosStreamProxyInstance = removeEyevinnChaosStreamProxyInstance;
/**
 * Get a Chaos Stream Proxy instance
 *
 * @memberOf eyevinn-chaos-stream-proxy
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the chaos-stream-proxy to be retrieved
 * @returns {EyevinnChaosStreamProxy} - Service instance
 */
async function getEyevinnChaosStreamProxyInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-chaos-stream-proxy');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-chaos-stream-proxy', name, serviceAccessToken);
}
exports.getEyevinnChaosStreamProxyInstance = getEyevinnChaosStreamProxyInstance;
//# sourceMappingURL=eyevinn-chaos-stream-proxy.js.map