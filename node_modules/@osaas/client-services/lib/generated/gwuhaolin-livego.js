"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGwuhaolinLivegoInstance = exports.removeGwuhaolinLivegoInstance = exports.createGwuhaolinLivegoInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace gwuhaolin-livego
 * @description Experience the power of simplicity and efficiency with our live broadcast server! Easy to install and use, built in pure Golang for high performance. Supports RTMP, AMF, HLS, HTTP-FLV protocols, FLV, TS containers, H264, AAC, MP3 encoding formats. Stream and playback seamlessly with just a few simple steps. Get your hands on this amazing product now!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} GwuhaolinLivegoConfig
 * @property {string} name - Name of livego

 *
 */
/**
 * @typedef {Object} GwuhaolinLivego
 * @property {string} name - Name of the Livego instance
 * @property {string} url - URL of the Livego instance
 *
 */
/**
 * Create a new Livego instance
 *
 * @memberOf gwuhaolin-livego
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {GwuhaolinLivegoConfig} body - Service instance configuration
 * @returns {GwuhaolinLivego} - Service instance
 * @example
 * import { Context, createGwuhaolinLivegoInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createGwuhaolinLivegoInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createGwuhaolinLivegoInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('gwuhaolin-livego');
    const instance = await (0, client_core_1.createInstance)(ctx, 'gwuhaolin-livego', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('gwuhaolin-livego', instance.name, ctx);
    return instance;
}
exports.createGwuhaolinLivegoInstance = createGwuhaolinLivegoInstance;
/**
 * Remove a Livego instance
 *
 * @memberOf gwuhaolin-livego
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the livego to be removed
 */
async function removeGwuhaolinLivegoInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('gwuhaolin-livego');
    await (0, client_core_1.removeInstance)(ctx, 'gwuhaolin-livego', name, serviceAccessToken);
}
exports.removeGwuhaolinLivegoInstance = removeGwuhaolinLivegoInstance;
/**
 * Get a Livego instance
 *
 * @memberOf gwuhaolin-livego
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the livego to be retrieved
 * @returns {GwuhaolinLivego} - Service instance
 */
async function getGwuhaolinLivegoInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('gwuhaolin-livego');
    return await (0, client_core_1.getInstance)(ctx, 'gwuhaolin-livego', name, serviceAccessToken);
}
exports.getGwuhaolinLivegoInstance = getGwuhaolinLivegoInstance;
//# sourceMappingURL=gwuhaolin-livego.js.map