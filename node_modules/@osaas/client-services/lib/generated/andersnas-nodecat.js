"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAndersnasNodecatInstance = exports.removeAndersnasNodecatInstance = exports.createAndersnasNodecatInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace andersnas-nodecat
 * @description Enhance your app's security with NodeCat, a robust solution for generating and validating Common Access Tokens in a NodeJS environment. Ideal for developers needing reliable token management.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} AndersnasNodecatConfig
 * @property {string} name - Name of nodecat
 * @property {string} SigningKey - SigningKey

 *
 */
/**
 * @typedef {Object} AndersnasNodecat
 * @property {string} name - Name of the NodeCat instance
 * @property {string} url - URL of the NodeCat instance
 *
 */
/**
 * Create a new NodeCat instance
 *
 * @memberOf andersnas-nodecat
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {AndersnasNodecatConfig} body - Service instance configuration
 * @returns {AndersnasNodecat} - Service instance
 * @example
 * import { Context, createAndersnasNodecatInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createAndersnasNodecatInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createAndersnasNodecatInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('andersnas-nodecat');
    const instance = await (0, client_core_1.createInstance)(ctx, 'andersnas-nodecat', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('andersnas-nodecat', instance.name, ctx);
    return instance;
}
exports.createAndersnasNodecatInstance = createAndersnasNodecatInstance;
/**
 * Remove a NodeCat instance
 *
 * @memberOf andersnas-nodecat
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the nodecat to be removed
 */
async function removeAndersnasNodecatInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('andersnas-nodecat');
    await (0, client_core_1.removeInstance)(ctx, 'andersnas-nodecat', name, serviceAccessToken);
}
exports.removeAndersnasNodecatInstance = removeAndersnasNodecatInstance;
/**
 * Get a NodeCat instance
 *
 * @memberOf andersnas-nodecat
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the nodecat to be retrieved
 * @returns {AndersnasNodecat} - Service instance
 */
async function getAndersnasNodecatInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('andersnas-nodecat');
    return await (0, client_core_1.getInstance)(ctx, 'andersnas-nodecat', name, serviceAccessToken);
}
exports.getAndersnasNodecatInstance = getAndersnasNodecatInstance;
//# sourceMappingURL=andersnas-nodecat.js.map