"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnDockerTestsrcHlsLiveInstance = exports.removeEyevinnDockerTestsrcHlsLiveInstance = exports.createEyevinnDockerTestsrcHlsLiveInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-docker-testsrc-hls-live
 * @description Effortlessly create live HLS test streams with the docker-testsrc-hls-live image. Powered by FFmpeg, it's a must-have for developers crafting and testing video applications in real-time streaming environments.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} EyevinnDockerTestsrcHlsLiveConfig
 * @property {string} name - Name of docker-testsrc-hls-live

 *
 */
/**
 * @typedef {Object} EyevinnDockerTestsrcHlsLive
 * @property {string} name - Name of the Test Source HLS Live instance
 * @property {string} url - URL of the Test Source HLS Live instance
 *
 */
/**
 * Create a new Test Source HLS Live instance
 *
 * @memberOf eyevinn-docker-testsrc-hls-live
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnDockerTestsrcHlsLiveConfig} body - Service instance configuration
 * @returns {EyevinnDockerTestsrcHlsLive} - Service instance
 * @example
 * import { Context, createEyevinnDockerTestsrcHlsLiveInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnDockerTestsrcHlsLiveInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnDockerTestsrcHlsLiveInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-docker-testsrc-hls-live');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-docker-testsrc-hls-live', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-docker-testsrc-hls-live', instance.name, ctx);
    return instance;
}
exports.createEyevinnDockerTestsrcHlsLiveInstance = createEyevinnDockerTestsrcHlsLiveInstance;
/**
 * Remove a Test Source HLS Live instance
 *
 * @memberOf eyevinn-docker-testsrc-hls-live
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the testsource to be removed
 */
async function removeEyevinnDockerTestsrcHlsLiveInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-docker-testsrc-hls-live');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-docker-testsrc-hls-live', name, serviceAccessToken);
}
exports.removeEyevinnDockerTestsrcHlsLiveInstance = removeEyevinnDockerTestsrcHlsLiveInstance;
/**
 * Get a Test Source HLS Live instance
 *
 * @memberOf eyevinn-docker-testsrc-hls-live
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the testsource to be retrieved
 * @returns {EyevinnDockerTestsrcHlsLive} - Service instance
 */
async function getEyevinnDockerTestsrcHlsLiveInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-docker-testsrc-hls-live');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-docker-testsrc-hls-live', name, serviceAccessToken);
}
exports.getEyevinnDockerTestsrcHlsLiveInstance = getEyevinnDockerTestsrcHlsLiveInstance;
//# sourceMappingURL=eyevinn-docker-testsrc-hls-live.js.map