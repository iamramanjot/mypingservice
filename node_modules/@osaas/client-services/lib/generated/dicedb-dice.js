"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDicedbDiceInstance = exports.removeDicedbDiceInstance = exports.createDicedbDiceInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace dicedb-dice
 * @description Experience real-time data management with DiceDB, the open-source, redis-compliant, reactive cache. Its scalable and multithreaded architecture enhances modern hardware utilization, perfect for cutting-edge applications.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} DicedbDiceConfig
 * @property {string} name - Name of dice

 *
 */
/**
 * @typedef {Object} DicedbDice
 * @property {string} name - Name of the Dice DB instance
 * @property {string} url - URL of the Dice DB instance
 *
 */
/**
 * Create a new Dice DB instance
 *
 * @memberOf dicedb-dice
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {DicedbDiceConfig} body - Service instance configuration
 * @returns {DicedbDice} - Service instance
 * @example
 * import { Context, createDicedbDiceInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createDicedbDiceInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createDicedbDiceInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('dicedb-dice');
    const instance = await (0, client_core_1.createInstance)(ctx, 'dicedb-dice', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('dicedb-dice', instance.name, ctx);
    return instance;
}
exports.createDicedbDiceInstance = createDicedbDiceInstance;
/**
 * Remove a Dice DB instance
 *
 * @memberOf dicedb-dice
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the dice to be removed
 */
async function removeDicedbDiceInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('dicedb-dice');
    await (0, client_core_1.removeInstance)(ctx, 'dicedb-dice', name, serviceAccessToken);
}
exports.removeDicedbDiceInstance = removeDicedbDiceInstance;
/**
 * Get a Dice DB instance
 *
 * @memberOf dicedb-dice
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the dice to be retrieved
 * @returns {DicedbDice} - Service instance
 */
async function getDicedbDiceInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('dicedb-dice');
    return await (0, client_core_1.getInstance)(ctx, 'dicedb-dice', name, serviceAccessToken);
}
exports.getDicedbDiceInstance = getDicedbDiceInstance;
//# sourceMappingURL=dicedb-dice.js.map