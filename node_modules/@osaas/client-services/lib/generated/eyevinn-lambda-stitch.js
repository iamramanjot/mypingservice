"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnLambdaStitchInstance = exports.removeEyevinnLambdaStitchInstance = exports.createEyevinnLambdaStitchInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-lambda-stitch
 * @description A proxy to insert ads in an HLS VOD either using manifest manipulation or HLS interstitials
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-HLS-VOD-Stitcher.html|Online docs} for further information
 */
/**
 * @typedef {Object} EyevinnLambdaStitchConfig
 * @property {string} name - Name of lambda-stitch
 * @property {string} [AssetListBaseUrl] - AssetListBaseUrl

 *
 */
/**
 * @typedef {Object} EyevinnLambdaStitch
 * @property {string} name - Name of the HLS VOD Stitcher instance
 * @property {string} url - URL of the HLS VOD Stitcher instance
 *
 */
/**
 * Create a new HLS VOD Stitcher instance
 *
 * @memberOf eyevinn-lambda-stitch
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnLambdaStitchConfig} body - Service instance configuration
 * @returns {EyevinnLambdaStitch} - Service instance
 * @example
 * import { Context, createEyevinnLambdaStitchInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnLambdaStitchInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnLambdaStitchInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-lambda-stitch');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-lambda-stitch', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-lambda-stitch', instance.name, ctx);
    return instance;
}
exports.createEyevinnLambdaStitchInstance = createEyevinnLambdaStitchInstance;
/**
 * Remove a HLS VOD Stitcher instance
 *
 * @memberOf eyevinn-lambda-stitch
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the stitcher to be removed
 */
async function removeEyevinnLambdaStitchInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-lambda-stitch');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-lambda-stitch', name, serviceAccessToken);
}
exports.removeEyevinnLambdaStitchInstance = removeEyevinnLambdaStitchInstance;
/**
 * Get a HLS VOD Stitcher instance
 *
 * @memberOf eyevinn-lambda-stitch
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the stitcher to be retrieved
 * @returns {EyevinnLambdaStitch} - Service instance
 */
async function getEyevinnLambdaStitchInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-lambda-stitch');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-lambda-stitch', name, serviceAccessToken);
}
exports.getEyevinnLambdaStitchInstance = getEyevinnLambdaStitchInstance;
//# sourceMappingURL=eyevinn-lambda-stitch.js.map