"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnEncoreCallbackListenerInstance = exports.removeEyevinnEncoreCallbackListenerInstance = exports.createEyevinnEncoreCallbackListenerInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-encore-callback-listener
 * @description Encore callback listener is a powerful HTTP server that listens for successful job callbacks, posting jobId and Url on a redis queue. Fully customizable with environment variables. Enhance your project efficiency now! Contact sales@eyevinn.se for further details.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} EyevinnEncoreCallbackListenerConfig
 * @property {string} name - Name of encore-callback-listener
 * @property {string} RedisUrl - RedisUrl
 * @property {string} EncoreUrl - EncoreUrl
 * @property {string} [RedisQueue] - RedisQueue

 *
 */
/**
 * @typedef {Object} EyevinnEncoreCallbackListener
 * @property {string} name - Name of the Encore Callback Listener instance
 * @property {string} url - URL of the Encore Callback Listener instance
 *
 */
/**
 * Create a new Encore Callback Listener instance
 *
 * @memberOf eyevinn-encore-callback-listener
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnEncoreCallbackListenerConfig} body - Service instance configuration
 * @returns {EyevinnEncoreCallbackListener} - Service instance
 * @example
 * import { Context, createEyevinnEncoreCallbackListenerInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnEncoreCallbackListenerInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnEncoreCallbackListenerInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-encore-callback-listener');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-encore-callback-listener', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-encore-callback-listener', instance.name, ctx);
    return instance;
}
exports.createEyevinnEncoreCallbackListenerInstance = createEyevinnEncoreCallbackListenerInstance;
/**
 * Remove a Encore Callback Listener instance
 *
 * @memberOf eyevinn-encore-callback-listener
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the callback to be removed
 */
async function removeEyevinnEncoreCallbackListenerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-encore-callback-listener');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-encore-callback-listener', name, serviceAccessToken);
}
exports.removeEyevinnEncoreCallbackListenerInstance = removeEyevinnEncoreCallbackListenerInstance;
/**
 * Get a Encore Callback Listener instance
 *
 * @memberOf eyevinn-encore-callback-listener
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the callback to be retrieved
 * @returns {EyevinnEncoreCallbackListener} - Service instance
 */
async function getEyevinnEncoreCallbackListenerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-encore-callback-listener');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-encore-callback-listener', name, serviceAccessToken);
}
exports.getEyevinnEncoreCallbackListenerInstance = getEyevinnEncoreCallbackListenerInstance;
//# sourceMappingURL=eyevinn-encore-callback-listener.js.map