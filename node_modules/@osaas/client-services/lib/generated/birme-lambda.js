"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBirmeLambdaInstance = exports.removeBirmeLambdaInstance = exports.createBirmeLambdaInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace birme-lambda
 * @description Effortlessly deploy JavaScript/TypeScript code as HTTP-based lambda functions with our simple solution. Just zip, upload, and watch your code run on any HTTP request. Get started quickly with minimal setup!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Birme-Lambda.html|Online docs} for further information
 */
/**
 * @typedef {Object} BirmeLambdaConfig
 * @property {string} name - Name of lambda

 *
 */
/**
 * @typedef {Object} BirmeLambda
 * @property {string} name - Name of the lambda instance
 * @property {string} url - URL of the lambda instance
 *
 */
/**
 * Create a new lambda instance
 *
 * @memberOf birme-lambda
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {BirmeLambdaConfig} body - Service instance configuration
 * @returns {BirmeLambda} - Service instance
 * @example
 * import { Context, createBirmeLambdaInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createBirmeLambdaInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createBirmeLambdaInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('birme-lambda');
    const instance = await (0, client_core_1.createInstance)(ctx, 'birme-lambda', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('birme-lambda', instance.name, ctx);
    return instance;
}
exports.createBirmeLambdaInstance = createBirmeLambdaInstance;
/**
 * Remove a lambda instance
 *
 * @memberOf birme-lambda
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the lambda to be removed
 */
async function removeBirmeLambdaInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('birme-lambda');
    await (0, client_core_1.removeInstance)(ctx, 'birme-lambda', name, serviceAccessToken);
}
exports.removeBirmeLambdaInstance = removeBirmeLambdaInstance;
/**
 * Get a lambda instance
 *
 * @memberOf birme-lambda
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the lambda to be retrieved
 * @returns {BirmeLambda} - Service instance
 */
async function getBirmeLambdaInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('birme-lambda');
    return await (0, client_core_1.getInstance)(ctx, 'birme-lambda', name, serviceAccessToken);
}
exports.getBirmeLambdaInstance = getBirmeLambdaInstance;
//# sourceMappingURL=birme-lambda.js.map