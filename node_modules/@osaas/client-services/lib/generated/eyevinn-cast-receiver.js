"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnCastReceiverInstance = exports.removeEyevinnCastReceiverInstance = exports.createEyevinnCastReceiverInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-cast-receiver
 * @description A basic custom chromecast receiver that can be configured using environment variables. Add your company branding to your own chromecast receiver without writing a single line of code!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://github.com/Eyevinn/cast-receiver|Online docs} for further information
 */
/**
 * @typedef {Object} EyevinnCastReceiverConfig
 * @property {string} name - Name of cast-receiver
 * @property {string} title - Title
 * @property {string} [castReceiverOptions] - CastReceiverOptions
 * @property {string} [playbackLogoUrl] - PlaybackLogoUrl
 * @property {string} [logoUrl] - LogoUrl
 * @property {string} [castMediaPlayerStyle] - CastMediaPlayerStyle

 *
 */
/**
 * @typedef {Object} EyevinnCastReceiver
 * @property {string} name - Name of the Chromecast receiver instance
 * @property {string} url - URL of the Chromecast receiver instance
 *
 */
/**
 * Create a new Chromecast receiver instance
 *
 * @memberOf eyevinn-cast-receiver
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnCastReceiverConfig} body - Service instance configuration
 * @returns {EyevinnCastReceiver} - Service instance
 * @example
 * import { Context, createEyevinnCastReceiverInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnCastReceiverInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnCastReceiverInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-cast-receiver');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-cast-receiver', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-cast-receiver', instance.name, ctx);
    return instance;
}
exports.createEyevinnCastReceiverInstance = createEyevinnCastReceiverInstance;
/**
 * Remove a Chromecast receiver instance
 *
 * @memberOf eyevinn-cast-receiver
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the receiver to be removed
 */
async function removeEyevinnCastReceiverInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-cast-receiver');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-cast-receiver', name, serviceAccessToken);
}
exports.removeEyevinnCastReceiverInstance = removeEyevinnCastReceiverInstance;
/**
 * Get a Chromecast receiver instance
 *
 * @memberOf eyevinn-cast-receiver
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the receiver to be retrieved
 * @returns {EyevinnCastReceiver} - Service instance
 */
async function getEyevinnCastReceiverInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-cast-receiver');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-cast-receiver', name, serviceAccessToken);
}
exports.getEyevinnCastReceiverInstance = getEyevinnCastReceiverInstance;
//# sourceMappingURL=eyevinn-cast-receiver.js.map