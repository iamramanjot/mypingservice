"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMatomoOrgMatomoInstance = exports.removeMatomoOrgMatomoInstance = exports.createMatomoOrgMatomoInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace matomo-org-matomo
 * @description Unleash the power of analytics with Matomo. Own your data with this feature-rich open-source alternative to Google Analytics. Easy installation, real-time stats, and privacy-driven, used by millions!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} MatomoOrgMatomoConfig
 * @property {string} name - Name of matomo
 * @property {string} [DatabaseHost] - DatabaseHost
 * @property {string} [DatabaseAdapter] - DatabaseAdapter
 * @property {string} [DatabaseTablesPrefix] - DatabaseTablesPrefix
 * @property {string} [DatabaseUsername] - DatabaseUsername
 * @property {string} [DatabasePassword] - DatabasePassword
 * @property {string} [DatabaseDbName] - DatabaseDbName

 *
 */
/**
 * @typedef {Object} MatomoOrgMatomo
 * @property {string} name - Name of the Matomo instance
 * @property {string} url - URL of the Matomo instance
 *
 */
/**
 * Create a new Matomo instance
 *
 * @memberOf matomo-org-matomo
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {MatomoOrgMatomoConfig} body - Service instance configuration
 * @returns {MatomoOrgMatomo} - Service instance
 * @example
 * import { Context, createMatomoOrgMatomoInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createMatomoOrgMatomoInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createMatomoOrgMatomoInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('matomo-org-matomo');
    const instance = await (0, client_core_1.createInstance)(ctx, 'matomo-org-matomo', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('matomo-org-matomo', instance.name, ctx);
    return instance;
}
exports.createMatomoOrgMatomoInstance = createMatomoOrgMatomoInstance;
/**
 * Remove a Matomo instance
 *
 * @memberOf matomo-org-matomo
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the matomo to be removed
 */
async function removeMatomoOrgMatomoInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('matomo-org-matomo');
    await (0, client_core_1.removeInstance)(ctx, 'matomo-org-matomo', name, serviceAccessToken);
}
exports.removeMatomoOrgMatomoInstance = removeMatomoOrgMatomoInstance;
/**
 * Get a Matomo instance
 *
 * @memberOf matomo-org-matomo
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the matomo to be retrieved
 * @returns {MatomoOrgMatomo} - Service instance
 */
async function getMatomoOrgMatomoInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('matomo-org-matomo');
    return await (0, client_core_1.getInstance)(ctx, 'matomo-org-matomo', name, serviceAccessToken);
}
exports.getMatomoOrgMatomoInstance = getMatomoOrgMatomoInstance;
//# sourceMappingURL=matomo-org-matomo.js.map