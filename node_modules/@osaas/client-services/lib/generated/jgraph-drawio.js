"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJgraphDrawioInstance = exports.removeJgraphDrawioInstance = exports.createJgraphDrawioInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace jgraph-drawio
 * @description Unleash your creativity with draw.io, the ultimate diagramming tool for visual storytelling and dynamic whiteboarding. Effortlessly craft, design, and export your ideas with a seamless, intuitive interface.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} JgraphDrawioConfig
 * @property {string} name - Name of drawio

 *
 */
/**
 * @typedef {Object} JgraphDrawio
 * @property {string} name - Name of the draw.io instance
 * @property {string} url - URL of the draw.io instance
 *
 */
/**
 * Create a new draw.io instance
 *
 * @memberOf jgraph-drawio
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {JgraphDrawioConfig} body - Service instance configuration
 * @returns {JgraphDrawio} - Service instance
 * @example
 * import { Context, createJgraphDrawioInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createJgraphDrawioInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createJgraphDrawioInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('jgraph-drawio');
    const instance = await (0, client_core_1.createInstance)(ctx, 'jgraph-drawio', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('jgraph-drawio', instance.name, ctx);
    return instance;
}
exports.createJgraphDrawioInstance = createJgraphDrawioInstance;
/**
 * Remove a draw.io instance
 *
 * @memberOf jgraph-drawio
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the editor to be removed
 */
async function removeJgraphDrawioInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('jgraph-drawio');
    await (0, client_core_1.removeInstance)(ctx, 'jgraph-drawio', name, serviceAccessToken);
}
exports.removeJgraphDrawioInstance = removeJgraphDrawioInstance;
/**
 * Get a draw.io instance
 *
 * @memberOf jgraph-drawio
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the editor to be retrieved
 * @returns {JgraphDrawio} - Service instance
 */
async function getJgraphDrawioInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('jgraph-drawio');
    return await (0, client_core_1.getInstance)(ctx, 'jgraph-drawio', name, serviceAccessToken);
}
exports.getJgraphDrawioInstance = getJgraphDrawioInstance;
//# sourceMappingURL=jgraph-drawio.js.map