"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErnestocaroccaHelloWorldInstance = exports.removeErnestocaroccaHelloWorldInstance = exports.createErnestocaroccaHelloWorldInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace ernestocarocca-hello-world
 * @description Harness the power of Next.js 14 and NextUI v2 with this feature-rich template. Perfect for creating sleek, dynamic apps with Tailwind CSS and TypeScript. Kickstart your project efficiently today!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} ErnestocaroccaHelloWorldConfig
 * @property {string} name - Name of hello-world
 * @property {string} Text - Text

 *
 */
/**
 * @typedef {Object} ErnestocaroccaHelloWorld
 * @property {string} name - Name of the Hello World instance
 * @property {string} url - URL of the Hello World instance
 *
 */
/**
 * Create a new Hello World instance
 *
 * @memberOf ernestocarocca-hello-world
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {ErnestocaroccaHelloWorldConfig} body - Service instance configuration
 * @returns {ErnestocaroccaHelloWorld} - Service instance
 * @example
 * import { Context, createErnestocaroccaHelloWorldInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createErnestocaroccaHelloWorldInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createErnestocaroccaHelloWorldInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('ernestocarocca-hello-world');
    const instance = await (0, client_core_1.createInstance)(ctx, 'ernestocarocca-hello-world', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('ernestocarocca-hello-world', instance.name, ctx);
    return instance;
}
exports.createErnestocaroccaHelloWorldInstance = createErnestocaroccaHelloWorldInstance;
/**
 * Remove a Hello World instance
 *
 * @memberOf ernestocarocca-hello-world
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the example to be removed
 */
async function removeErnestocaroccaHelloWorldInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('ernestocarocca-hello-world');
    await (0, client_core_1.removeInstance)(ctx, 'ernestocarocca-hello-world', name, serviceAccessToken);
}
exports.removeErnestocaroccaHelloWorldInstance = removeErnestocaroccaHelloWorldInstance;
/**
 * Get a Hello World instance
 *
 * @memberOf ernestocarocca-hello-world
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the example to be retrieved
 * @returns {ErnestocaroccaHelloWorld} - Service instance
 */
async function getErnestocaroccaHelloWorldInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('ernestocarocca-hello-world');
    return await (0, client_core_1.getInstance)(ctx, 'ernestocarocca-hello-world', name, serviceAccessToken);
}
exports.getErnestocaroccaHelloWorldInstance = getErnestocaroccaHelloWorldInstance;
//# sourceMappingURL=ernestocarocca-hello-world.js.map