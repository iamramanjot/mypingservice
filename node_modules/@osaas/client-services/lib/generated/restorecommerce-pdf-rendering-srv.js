"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRestorecommercePdfRenderingSrvInstance = exports.removeRestorecommercePdfRenderingSrvInstance = exports.createRestorecommercePdfRenderingSrvInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace restorecommerce-pdf-rendering-srv
 * @description Elevate your documentation with our PDF Rendering Service. Turn any URL into a PDF effortlessly. Ideal for business reports and archives. Join the future of document management today.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.restorecommerce.io/pdf-rendering-srv/index.html|Online docs} for further information
 */
/**
 * @typedef {Object} RestorecommercePdfRenderingSrvConfig
 * @property {string} name - Name of pdf-rendering-srv

 *
 */
/**
 * @typedef {Object} RestorecommercePdfRenderingSrv
 * @property {string} name - Name of the PDF Rendering Service instance
 * @property {string} url - URL of the PDF Rendering Service instance
 *
 */
/**
 * Create a new PDF Rendering Service instance
 *
 * @memberOf restorecommerce-pdf-rendering-srv
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {RestorecommercePdfRenderingSrvConfig} body - Service instance configuration
 * @returns {RestorecommercePdfRenderingSrv} - Service instance
 * @example
 * import { Context, createRestorecommercePdfRenderingSrvInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createRestorecommercePdfRenderingSrvInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createRestorecommercePdfRenderingSrvInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('restorecommerce-pdf-rendering-srv');
    const instance = await (0, client_core_1.createInstance)(ctx, 'restorecommerce-pdf-rendering-srv', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('restorecommerce-pdf-rendering-srv', instance.name, ctx);
    return instance;
}
exports.createRestorecommercePdfRenderingSrvInstance = createRestorecommercePdfRenderingSrvInstance;
/**
 * Remove a PDF Rendering Service instance
 *
 * @memberOf restorecommerce-pdf-rendering-srv
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the pdf-rendering-srv to be removed
 */
async function removeRestorecommercePdfRenderingSrvInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('restorecommerce-pdf-rendering-srv');
    await (0, client_core_1.removeInstance)(ctx, 'restorecommerce-pdf-rendering-srv', name, serviceAccessToken);
}
exports.removeRestorecommercePdfRenderingSrvInstance = removeRestorecommercePdfRenderingSrvInstance;
/**
 * Get a PDF Rendering Service instance
 *
 * @memberOf restorecommerce-pdf-rendering-srv
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the pdf-rendering-srv to be retrieved
 * @returns {RestorecommercePdfRenderingSrv} - Service instance
 */
async function getRestorecommercePdfRenderingSrvInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('restorecommerce-pdf-rendering-srv');
    return await (0, client_core_1.getInstance)(ctx, 'restorecommerce-pdf-rendering-srv', name, serviceAccessToken);
}
exports.getRestorecommercePdfRenderingSrvInstance = getRestorecommercePdfRenderingSrvInstance;
//# sourceMappingURL=restorecommerce-pdf-rendering-srv.js.map