"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRealeyesMediaMoeReplayInstance = exports.removeRealeyesMediaMoeReplayInstance = exports.createRealeyesMediaMoeReplayInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace realeyes-media-moe-replay
 * @description Transform live video streams instantly with MOE REPlay. Perfect for creating live HLS manifests on the fly. Enhance your streaming service now!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} RealeyesMediaMoeReplayConfig
 * @property {string} name - Name of moe-replay

 *
 */
/**
 * @typedef {Object} RealeyesMediaMoeReplay
 * @property {string} name - Name of the MOE Replay instance
 * @property {string} url - URL of the MOE Replay instance
 *
 */
/**
 * Create a new MOE Replay instance
 *
 * @memberOf realeyes-media-moe-replay
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {RealeyesMediaMoeReplayConfig} body - Service instance configuration
 * @returns {RealeyesMediaMoeReplay} - Service instance
 * @example
 * import { Context, createRealeyesMediaMoeReplayInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createRealeyesMediaMoeReplayInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createRealeyesMediaMoeReplayInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('realeyes-media-moe-replay');
    const instance = await (0, client_core_1.createInstance)(ctx, 'realeyes-media-moe-replay', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('realeyes-media-moe-replay', instance.name, ctx);
    return instance;
}
exports.createRealeyesMediaMoeReplayInstance = createRealeyesMediaMoeReplayInstance;
/**
 * Remove a MOE Replay instance
 *
 * @memberOf realeyes-media-moe-replay
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the moe-replay to be removed
 */
async function removeRealeyesMediaMoeReplayInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('realeyes-media-moe-replay');
    await (0, client_core_1.removeInstance)(ctx, 'realeyes-media-moe-replay', name, serviceAccessToken);
}
exports.removeRealeyesMediaMoeReplayInstance = removeRealeyesMediaMoeReplayInstance;
/**
 * Get a MOE Replay instance
 *
 * @memberOf realeyes-media-moe-replay
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the moe-replay to be retrieved
 * @returns {RealeyesMediaMoeReplay} - Service instance
 */
async function getRealeyesMediaMoeReplayInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('realeyes-media-moe-replay');
    return await (0, client_core_1.getInstance)(ctx, 'realeyes-media-moe-replay', name, serviceAccessToken);
}
exports.getRealeyesMediaMoeReplayInstance = getRealeyesMediaMoeReplayInstance;
//# sourceMappingURL=realeyes-media-moe-replay.js.map