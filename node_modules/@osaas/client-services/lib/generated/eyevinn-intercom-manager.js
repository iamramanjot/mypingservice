"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnIntercomManagerInstance = exports.removeEyevinnIntercomManagerInstance = exports.createEyevinnIntercomManagerInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-intercom-manager
 * @description Open Source Intercom Solution providing production-grade audio quality and real-time latency. Powered by Symphony Media Bridge open source media server.

Join our Slack community for support and customization. Contact sales@eyevinn.se for further development and support. Visit Eyevinn Technology for innovative video solutions.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Intercom.html|Online docs} for further information
 */
/**
 * @typedef {Object} EyevinnIntercomManagerConfig
 * @property {string} name - Name of intercom-manager
 * @property {string} smbUrl - SmbUrl
 * @property {string} [smbApiKey] - SmbApiKey
 * @property {string} mongodbUrl - MongodbUrl

 *
 */
/**
 * @typedef {Object} EyevinnIntercomManager
 * @property {string} name - Name of the Intercom instance
 * @property {string} url - URL of the Intercom instance
 *
 */
/**
 * Create a new Intercom instance
 *
 * @memberOf eyevinn-intercom-manager
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnIntercomManagerConfig} body - Service instance configuration
 * @returns {EyevinnIntercomManager} - Service instance
 * @example
 * import { Context, createEyevinnIntercomManagerInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnIntercomManagerInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnIntercomManagerInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-intercom-manager');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-intercom-manager', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-intercom-manager', instance.name, ctx);
    return instance;
}
exports.createEyevinnIntercomManagerInstance = createEyevinnIntercomManagerInstance;
/**
 * Remove a Intercom instance
 *
 * @memberOf eyevinn-intercom-manager
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the system to be removed
 */
async function removeEyevinnIntercomManagerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-intercom-manager');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-intercom-manager', name, serviceAccessToken);
}
exports.removeEyevinnIntercomManagerInstance = removeEyevinnIntercomManagerInstance;
/**
 * Get a Intercom instance
 *
 * @memberOf eyevinn-intercom-manager
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the system to be retrieved
 * @returns {EyevinnIntercomManager} - Service instance
 */
async function getEyevinnIntercomManagerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-intercom-manager');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-intercom-manager', name, serviceAccessToken);
}
exports.getEyevinnIntercomManagerInstance = getEyevinnIntercomManagerInstance;
//# sourceMappingURL=eyevinn-intercom-manager.js.map