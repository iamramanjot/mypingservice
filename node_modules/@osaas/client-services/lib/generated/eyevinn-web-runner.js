"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnWebRunnerInstance = exports.removeEyevinnWebRunnerInstance = exports.createEyevinnWebRunnerInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-web-runner
 * @description Effortlessly deploy NodeJS web apps with Web-Runner! This Docker container seamlessly handles cloning, building, and running your GitHub repositories. Simplify your deployment process today!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Web-Runner.html|Online docs} for further information
 */
/**
 * @typedef {Object} EyevinnWebRunnerConfig
 * @property {string} name - Name of web-runner
 * @property {string} GitHubUrl - GitHubUrl
 * @property {string} GitHubToken - GitHubToken
 * @property {string} [OscAccessToken] - OscAccessToken
 * @property {string} [ConfigService] - ConfigService

 *
 */
/**
 * @typedef {Object} EyevinnWebRunner
 * @property {string} name - Name of the Web Runner instance
 * @property {string} url - URL of the Web Runner instance
 *
 */
/**
 * Create a new Web Runner instance
 *
 * @memberOf eyevinn-web-runner
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnWebRunnerConfig} body - Service instance configuration
 * @returns {EyevinnWebRunner} - Service instance
 * @example
 * import { Context, createEyevinnWebRunnerInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnWebRunnerInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnWebRunnerInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-web-runner');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-web-runner', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-web-runner', instance.name, ctx);
    return instance;
}
exports.createEyevinnWebRunnerInstance = createEyevinnWebRunnerInstance;
/**
 * Remove a Web Runner instance
 *
 * @memberOf eyevinn-web-runner
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the web-runner to be removed
 */
async function removeEyevinnWebRunnerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-web-runner');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-web-runner', name, serviceAccessToken);
}
exports.removeEyevinnWebRunnerInstance = removeEyevinnWebRunnerInstance;
/**
 * Get a Web Runner instance
 *
 * @memberOf eyevinn-web-runner
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the web-runner to be retrieved
 * @returns {EyevinnWebRunner} - Service instance
 */
async function getEyevinnWebRunnerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-web-runner');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-web-runner', name, serviceAccessToken);
}
exports.getEyevinnWebRunnerInstance = getEyevinnWebRunnerInstance;
//# sourceMappingURL=eyevinn-web-runner.js.map