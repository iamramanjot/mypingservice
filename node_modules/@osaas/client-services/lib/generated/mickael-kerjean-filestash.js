"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMickaelKerjeanFilestashInstance = exports.removeMickaelKerjeanFilestashInstance = exports.createMickaelKerjeanFilestashInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace mickael-kerjean-filestash
 * @description Transform your data management with Filestash, a versatile file manager that integrates seamlessly with multiple cloud services and protocols. Enjoy blazing speed, user-friendly interfaces, and plugin flexibility.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Filestash.html|Online docs} for further information
 */
/**
 * @typedef {Object} MickaelKerjeanFilestashConfig
 * @property {string} name - Name of filestash
 * @property {string} [AdminPassword] - AdminPassword
 * @property {string} [ConfigSecret] - ConfigSecret
 * @property {string} [DropboxClientId] - DropboxClientId
 * @property {string} [GdriveClientId] - GdriveClientId
 * @property {string} [GdriveClientSecret] - GdriveClientSecret

 *
 */
/**
 * @typedef {Object} MickaelKerjeanFilestash
 * @property {string} name - Name of the Filestash instance
 * @property {string} url - URL of the Filestash instance
 *
 */
/**
 * Create a new Filestash instance
 *
 * @memberOf mickael-kerjean-filestash
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {MickaelKerjeanFilestashConfig} body - Service instance configuration
 * @returns {MickaelKerjeanFilestash} - Service instance
 * @example
 * import { Context, createMickaelKerjeanFilestashInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createMickaelKerjeanFilestashInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createMickaelKerjeanFilestashInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('mickael-kerjean-filestash');
    const instance = await (0, client_core_1.createInstance)(ctx, 'mickael-kerjean-filestash', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('mickael-kerjean-filestash', instance.name, ctx);
    return instance;
}
exports.createMickaelKerjeanFilestashInstance = createMickaelKerjeanFilestashInstance;
/**
 * Remove a Filestash instance
 *
 * @memberOf mickael-kerjean-filestash
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the filestash to be removed
 */
async function removeMickaelKerjeanFilestashInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('mickael-kerjean-filestash');
    await (0, client_core_1.removeInstance)(ctx, 'mickael-kerjean-filestash', name, serviceAccessToken);
}
exports.removeMickaelKerjeanFilestashInstance = removeMickaelKerjeanFilestashInstance;
/**
 * Get a Filestash instance
 *
 * @memberOf mickael-kerjean-filestash
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the filestash to be retrieved
 * @returns {MickaelKerjeanFilestash} - Service instance
 */
async function getMickaelKerjeanFilestashInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('mickael-kerjean-filestash');
    return await (0, client_core_1.getInstance)(ctx, 'mickael-kerjean-filestash', name, serviceAccessToken);
}
exports.getMickaelKerjeanFilestashInstance = getMickaelKerjeanFilestashInstance;
//# sourceMappingURL=mickael-kerjean-filestash.js.map