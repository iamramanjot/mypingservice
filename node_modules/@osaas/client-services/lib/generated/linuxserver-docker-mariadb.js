"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLinuxserverDockerMariadbInstance = exports.removeLinuxserverDockerMariadbInstance = exports.createLinuxserverDockerMariadbInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace linuxserver-docker-mariadb
 * @description Unlock the full potential of your database management with LinuxServer.io's MariaDB Docker container. Featuring seamless updates, security enhancements, and multi-platform support, it's the ideal solution for efficient and reliable data storage. Minimize downtime and bandwidth usage, and maximize your productivity. Transform your database experience now!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-MariaDB.html|Online docs} for further information
 */
/**
 * @typedef {Object} LinuxserverDockerMariadbConfig
 * @property {string} name - Name of database server
 * @property {string} RootPassword - Administrator password for database server
 * @property {string} [Database] - Database
 * @property {string} [User] - User
 * @property {string} [Password] - Password

 *
 */
/**
 * @typedef {Object} LinuxserverDockerMariadb
 * @property {string} name - Name of the MariaDB instance
 * @property {string} url - URL of the MariaDB instance
 *
 */
/**
 * Create a new MariaDB instance
 *
 * @memberOf linuxserver-docker-mariadb
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {LinuxserverDockerMariadbConfig} body - Service instance configuration
 * @returns {LinuxserverDockerMariadb} - Service instance
 * @example
 * import { Context, createLinuxserverDockerMariadbInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createLinuxserverDockerMariadbInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createLinuxserverDockerMariadbInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('linuxserver-docker-mariadb');
    const instance = await (0, client_core_1.createInstance)(ctx, 'linuxserver-docker-mariadb', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('linuxserver-docker-mariadb', instance.name, ctx);
    return instance;
}
exports.createLinuxserverDockerMariadbInstance = createLinuxserverDockerMariadbInstance;
/**
 * Remove a MariaDB instance
 *
 * @memberOf linuxserver-docker-mariadb
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the dbserver to be removed
 */
async function removeLinuxserverDockerMariadbInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('linuxserver-docker-mariadb');
    await (0, client_core_1.removeInstance)(ctx, 'linuxserver-docker-mariadb', name, serviceAccessToken);
}
exports.removeLinuxserverDockerMariadbInstance = removeLinuxserverDockerMariadbInstance;
/**
 * Get a MariaDB instance
 *
 * @memberOf linuxserver-docker-mariadb
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the dbserver to be retrieved
 * @returns {LinuxserverDockerMariadb} - Service instance
 */
async function getLinuxserverDockerMariadbInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('linuxserver-docker-mariadb');
    return await (0, client_core_1.getInstance)(ctx, 'linuxserver-docker-mariadb', name, serviceAccessToken);
}
exports.getLinuxserverDockerMariadbInstance = getLinuxserverDockerMariadbInstance;
//# sourceMappingURL=linuxserver-docker-mariadb.js.map