"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnAdNormalizerInstance = exports.removeEyevinnAdNormalizerInstance = exports.createEyevinnAdNormalizerInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-ad-normalizer
 * @description Optimize your ad delivery with Ad Normalizer! Seamlessly transcode and package VAST creatives for your ad server using a Redis-backed workflow. Ensure efficient media processing and reliable ad streaming.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Ad-Normalizer.html|Online docs} for further information
 */
/**
 * @typedef {Object} EyevinnAdNormalizerConfig
 * @property {string} name - Name of ad-normalizer
 * @property {string} EncoreUrl - EncoreUrl
 * @property {string} EncoreCallbackListenerUrl - EncoreCallbackListenerUrl
 * @property {string} AdServerUrl - AdServerUrl
 * @property {string} OutputBucketUrl - OutputBucketUrl
 * @property {string} S3AccessKey - S3AccessKey
 * @property {string} S3SecretKey - S3SecretKey
 * @property {string} [S3EndpointUrl] - S3EndpointUrl
 * @property {string} [RedisUrl] - RedisUrl
 * @property {string} [OscAccessToken] - OscAccessToken

 *
 */
/**
 * @typedef {Object} EyevinnAdNormalizer
 * @property {string} name - Name of the Ad Normalizer instance
 * @property {string} url - URL of the Ad Normalizer instance
 *
 */
/**
 * Create a new Ad Normalizer instance
 *
 * @memberOf eyevinn-ad-normalizer
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnAdNormalizerConfig} body - Service instance configuration
 * @returns {EyevinnAdNormalizer} - Service instance
 * @example
 * import { Context, createEyevinnAdNormalizerInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnAdNormalizerInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnAdNormalizerInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-ad-normalizer');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-ad-normalizer', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-ad-normalizer', instance.name, ctx);
    return instance;
}
exports.createEyevinnAdNormalizerInstance = createEyevinnAdNormalizerInstance;
/**
 * Remove a Ad Normalizer instance
 *
 * @memberOf eyevinn-ad-normalizer
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the normalizer to be removed
 */
async function removeEyevinnAdNormalizerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-ad-normalizer');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-ad-normalizer', name, serviceAccessToken);
}
exports.removeEyevinnAdNormalizerInstance = removeEyevinnAdNormalizerInstance;
/**
 * Get a Ad Normalizer instance
 *
 * @memberOf eyevinn-ad-normalizer
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the normalizer to be retrieved
 * @returns {EyevinnAdNormalizer} - Service instance
 */
async function getEyevinnAdNormalizerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-ad-normalizer');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-ad-normalizer', name, serviceAccessToken);
}
exports.getEyevinnAdNormalizerInstance = getEyevinnAdNormalizerInstance;
//# sourceMappingURL=eyevinn-ad-normalizer.js.map