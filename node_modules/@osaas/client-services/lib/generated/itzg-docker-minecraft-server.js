"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getItzgDockerMinecraftServerInstance = exports.removeItzgDockerMinecraftServerInstance = exports.createItzgDockerMinecraftServerInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace itzg-docker-minecraft-server
 * @description Experience seamless Minecraft server management with our Docker solution! Easily deploy, customize, and scale your servers with robust support for different versions, mods, and plugins. Perfect for dedicated gamers and server admins alike!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} ItzgDockerMinecraftServerConfig
 * @property {string} name - Name of docker-minecraft-server
 * @property {boolean} AcceptEula - AcceptEula
 * @property {string} RconPassword - RconPassword

 *
 */
/**
 * @typedef {Object} ItzgDockerMinecraftServer
 * @property {string} name - Name of the Minecraft Server instance
 * @property {string} url - URL of the Minecraft Server instance
 *
 */
/**
 * Create a new Minecraft Server instance
 *
 * @memberOf itzg-docker-minecraft-server
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {ItzgDockerMinecraftServerConfig} body - Service instance configuration
 * @returns {ItzgDockerMinecraftServer} - Service instance
 * @example
 * import { Context, createItzgDockerMinecraftServerInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createItzgDockerMinecraftServerInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createItzgDockerMinecraftServerInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('itzg-docker-minecraft-server');
    const instance = await (0, client_core_1.createInstance)(ctx, 'itzg-docker-minecraft-server', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('itzg-docker-minecraft-server', instance.name, ctx);
    return instance;
}
exports.createItzgDockerMinecraftServerInstance = createItzgDockerMinecraftServerInstance;
/**
 * Remove a Minecraft Server instance
 *
 * @memberOf itzg-docker-minecraft-server
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the minecraft-server to be removed
 */
async function removeItzgDockerMinecraftServerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('itzg-docker-minecraft-server');
    await (0, client_core_1.removeInstance)(ctx, 'itzg-docker-minecraft-server', name, serviceAccessToken);
}
exports.removeItzgDockerMinecraftServerInstance = removeItzgDockerMinecraftServerInstance;
/**
 * Get a Minecraft Server instance
 *
 * @memberOf itzg-docker-minecraft-server
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the minecraft-server to be retrieved
 * @returns {ItzgDockerMinecraftServer} - Service instance
 */
async function getItzgDockerMinecraftServerInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('itzg-docker-minecraft-server');
    return await (0, client_core_1.getInstance)(ctx, 'itzg-docker-minecraft-server', name, serviceAccessToken);
}
exports.getItzgDockerMinecraftServerInstance = getItzgDockerMinecraftServerInstance;
//# sourceMappingURL=itzg-docker-minecraft-server.js.map