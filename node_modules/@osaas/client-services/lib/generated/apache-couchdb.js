"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApacheCouchdbInstance = exports.removeApacheCouchdbInstance = exports.createApacheCouchdbInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace apache-couchdb
 * @description Unlock seamless data management with Apache CouchDB! Effortlessly scalable and highly available, CouchDB makes storing, retrieving, and syncing data across devices a breeze. Ideal for modern cloud apps!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-CouchDB.html|Online docs} for further information
 */
/**
 * @typedef {Object} ApacheCouchdbConfig
 * @property {string} name - Name of couchdb
 * @property {string} AdminPassword - AdminPassword

 *
 */
/**
 * @typedef {Object} ApacheCouchdb
 * @property {string} name - Name of the Couch DB instance
 * @property {string} url - URL of the Couch DB instance
 *
 */
/**
 * Create a new Couch DB instance
 *
 * @memberOf apache-couchdb
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {ApacheCouchdbConfig} body - Service instance configuration
 * @returns {ApacheCouchdb} - Service instance
 * @example
 * import { Context, createApacheCouchdbInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createApacheCouchdbInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createApacheCouchdbInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('apache-couchdb');
    const instance = await (0, client_core_1.createInstance)(ctx, 'apache-couchdb', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('apache-couchdb', instance.name, ctx);
    return instance;
}
exports.createApacheCouchdbInstance = createApacheCouchdbInstance;
/**
 * Remove a Couch DB instance
 *
 * @memberOf apache-couchdb
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the couchdb to be removed
 */
async function removeApacheCouchdbInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('apache-couchdb');
    await (0, client_core_1.removeInstance)(ctx, 'apache-couchdb', name, serviceAccessToken);
}
exports.removeApacheCouchdbInstance = removeApacheCouchdbInstance;
/**
 * Get a Couch DB instance
 *
 * @memberOf apache-couchdb
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the couchdb to be retrieved
 * @returns {ApacheCouchdb} - Service instance
 */
async function getApacheCouchdbInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('apache-couchdb');
    return await (0, client_core_1.getInstance)(ctx, 'apache-couchdb', name, serviceAccessToken);
}
exports.getApacheCouchdbInstance = getApacheCouchdbInstance;
//# sourceMappingURL=apache-couchdb.js.map