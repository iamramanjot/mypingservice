"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAtmozSftpInstance = exports.removeAtmozSftpInstance = exports.createAtmozSftpInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace atmoz-sftp
 * @description Effortlessly manage secure file transfers with our user-friendly SFTP server powered by OpenSSH. Ideal for sharing files securely using SSH, it integrates easily with Docker, ensuring both security and simplicity.

 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} AtmozSftpConfig
 * @property {string} name - Name of sftp
 * @property {string} Username - Username
 * @property {string} Password - Password

 *
 */
/**
 * @typedef {Object} AtmozSftp
 * @property {string} name - Name of the SFTP Server instance
 * @property {string} url - URL of the SFTP Server instance
 *
 */
/**
 * Create a new SFTP Server instance
 *
 * @memberOf atmoz-sftp
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {AtmozSftpConfig} body - Service instance configuration
 * @returns {AtmozSftp} - Service instance
 * @example
 * import { Context, createAtmozSftpInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createAtmozSftpInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createAtmozSftpInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('atmoz-sftp');
    const instance = await (0, client_core_1.createInstance)(ctx, 'atmoz-sftp', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('atmoz-sftp', instance.name, ctx);
    return instance;
}
exports.createAtmozSftpInstance = createAtmozSftpInstance;
/**
 * Remove a SFTP Server instance
 *
 * @memberOf atmoz-sftp
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the sftp to be removed
 */
async function removeAtmozSftpInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('atmoz-sftp');
    await (0, client_core_1.removeInstance)(ctx, 'atmoz-sftp', name, serviceAccessToken);
}
exports.removeAtmozSftpInstance = removeAtmozSftpInstance;
/**
 * Get a SFTP Server instance
 *
 * @memberOf atmoz-sftp
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the sftp to be retrieved
 * @returns {AtmozSftp} - Service instance
 */
async function getAtmozSftpInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('atmoz-sftp');
    return await (0, client_core_1.getInstance)(ctx, 'atmoz-sftp', name, serviceAccessToken);
}
exports.getAtmozSftpInstance = getAtmozSftpInstance;
//# sourceMappingURL=atmoz-sftp.js.map