"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnSgaiAdProxyInstance = exports.removeEyevinnSgaiAdProxyInstance = exports.createEyevinnSgaiAdProxyInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-sgai-ad-proxy
 * @description Boost viewer engagement with our Server-Guided Ad Insertion Proxy! Automatically embed ads into video streams with precision timing. Enhance monetization effortlessly while maintaining a seamless user experience.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-SGAI-Proxy.html|Online docs} for further information
 */
/**
 * @typedef {Object} EyevinnSgaiAdProxyConfig
 * @property {string} name - Name of sgai-ad-proxy
 * @property {string} VastEndpoint - VastEndpoint
 * @property {string} OriginUrl - OriginUrl
 * @property {enum} InsertionMode - InsertionMode
 * @property {string} [CouchDbEndpoint] - CouchDbEndpoint
 * @property {string} [CouchDbTable] - CouchDbTable
 * @property {string} [CouchDbUser] - CouchDbUser
 * @property {string} [CouchDbPassword] - CouchDbPassword

 *
 */
/**
 * @typedef {Object} EyevinnSgaiAdProxy
 * @property {string} name - Name of the SGAI Proxy instance
 * @property {string} url - URL of the SGAI Proxy instance
 *
 */
/**
 * Create a new SGAI Proxy instance
 *
 * @memberOf eyevinn-sgai-ad-proxy
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnSgaiAdProxyConfig} body - Service instance configuration
 * @returns {EyevinnSgaiAdProxy} - Service instance
 * @example
 * import { Context, createEyevinnSgaiAdProxyInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnSgaiAdProxyInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnSgaiAdProxyInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-sgai-ad-proxy');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-sgai-ad-proxy', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-sgai-ad-proxy', instance.name, ctx);
    return instance;
}
exports.createEyevinnSgaiAdProxyInstance = createEyevinnSgaiAdProxyInstance;
/**
 * Remove a SGAI Proxy instance
 *
 * @memberOf eyevinn-sgai-ad-proxy
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the proxy to be removed
 */
async function removeEyevinnSgaiAdProxyInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-sgai-ad-proxy');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-sgai-ad-proxy', name, serviceAccessToken);
}
exports.removeEyevinnSgaiAdProxyInstance = removeEyevinnSgaiAdProxyInstance;
/**
 * Get a SGAI Proxy instance
 *
 * @memberOf eyevinn-sgai-ad-proxy
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the proxy to be retrieved
 * @returns {EyevinnSgaiAdProxy} - Service instance
 */
async function getEyevinnSgaiAdProxyInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-sgai-ad-proxy');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-sgai-ad-proxy', name, serviceAccessToken);
}
exports.getEyevinnSgaiAdProxyInstance = getEyevinnSgaiAdProxyInstance;
//# sourceMappingURL=eyevinn-sgai-ad-proxy.js.map