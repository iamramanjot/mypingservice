"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBirmeOscPostgresqlInstance = exports.removeBirmeOscPostgresqlInstance = exports.createBirmeOscPostgresqlInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace birme-osc-postgresql
 * @description Unlock the full potential of your data with the PostgreSQL OSC image, seamlessly integrated for use in Eyevinn Open Source Cloud. Experience robust scalability, high security, and unmatched extensibility.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} BirmeOscPostgresqlConfig
 * @property {string} name - Name of osc-postgresql
 * @property {string} PostgresPassword - PostgresPassword
 * @property {string} [PostgresUser] - PostgresUser
 * @property {string} [PostgresDb] - PostgresDb
 * @property {string} [PostgresInitDbArgs] - PostgresInitDbArgs

 *
 */
/**
 * @typedef {Object} BirmeOscPostgresql
 * @property {string} name - Name of the PostgreSQL instance
 * @property {string} url - URL of the PostgreSQL instance
 *
 */
/**
 * Create a new PostgreSQL instance
 *
 * @memberOf birme-osc-postgresql
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {BirmeOscPostgresqlConfig} body - Service instance configuration
 * @returns {BirmeOscPostgresql} - Service instance
 * @example
 * import { Context, createBirmeOscPostgresqlInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createBirmeOscPostgresqlInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createBirmeOscPostgresqlInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('birme-osc-postgresql');
    const instance = await (0, client_core_1.createInstance)(ctx, 'birme-osc-postgresql', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('birme-osc-postgresql', instance.name, ctx);
    return instance;
}
exports.createBirmeOscPostgresqlInstance = createBirmeOscPostgresqlInstance;
/**
 * Remove a PostgreSQL instance
 *
 * @memberOf birme-osc-postgresql
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the psql-db to be removed
 */
async function removeBirmeOscPostgresqlInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('birme-osc-postgresql');
    await (0, client_core_1.removeInstance)(ctx, 'birme-osc-postgresql', name, serviceAccessToken);
}
exports.removeBirmeOscPostgresqlInstance = removeBirmeOscPostgresqlInstance;
/**
 * Get a PostgreSQL instance
 *
 * @memberOf birme-osc-postgresql
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the psql-db to be retrieved
 * @returns {BirmeOscPostgresql} - Service instance
 */
async function getBirmeOscPostgresqlInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('birme-osc-postgresql');
    return await (0, client_core_1.getInstance)(ctx, 'birme-osc-postgresql', name, serviceAccessToken);
}
exports.getBirmeOscPostgresqlInstance = getBirmeOscPostgresqlInstance;
//# sourceMappingURL=birme-osc-postgresql.js.map