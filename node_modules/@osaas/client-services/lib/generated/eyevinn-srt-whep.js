"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnSrtWhepInstance = exports.removeEyevinnSrtWhepInstance = exports.createEyevinnSrtWhepInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-srt-whep
 * @description SRT to WHEP application ingests MPEG-TS over SRT stream and outputs to WebRTC using WHEP signaling protocol, supporting MacOS and Ubuntu. No video transcoding, SDP offer/answer exchange focus, and compliance with popular production software. Get yours now!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} EyevinnSrtWhepConfig
 * @property {string} name - Name of srt-whep
 * @property {string} SourceIp - SourceIp
 * @property {string} SourcePort - SourcePort

 *
 */
/**
 * @typedef {Object} EyevinnSrtWhep
 * @property {string} name - Name of the SRT WHEP Bridge instance
 * @property {string} url - URL of the SRT WHEP Bridge instance
 *
 */
/**
 * Create a new SRT WHEP Bridge instance
 *
 * @memberOf eyevinn-srt-whep
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnSrtWhepConfig} body - Service instance configuration
 * @returns {EyevinnSrtWhep} - Service instance
 * @example
 * import { Context, createEyevinnSrtWhepInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnSrtWhepInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnSrtWhepInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-srt-whep');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-srt-whep', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-srt-whep', instance.name, ctx);
    return instance;
}
exports.createEyevinnSrtWhepInstance = createEyevinnSrtWhepInstance;
/**
 * Remove a SRT WHEP Bridge instance
 *
 * @memberOf eyevinn-srt-whep
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the bridge to be removed
 */
async function removeEyevinnSrtWhepInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-srt-whep');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-srt-whep', name, serviceAccessToken);
}
exports.removeEyevinnSrtWhepInstance = removeEyevinnSrtWhepInstance;
/**
 * Get a SRT WHEP Bridge instance
 *
 * @memberOf eyevinn-srt-whep
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the bridge to be retrieved
 * @returns {EyevinnSrtWhep} - Service instance
 */
async function getEyevinnSrtWhepInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-srt-whep');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-srt-whep', name, serviceAccessToken);
}
exports.getEyevinnSrtWhepInstance = getEyevinnSrtWhepInstance;
//# sourceMappingURL=eyevinn-srt-whep.js.map