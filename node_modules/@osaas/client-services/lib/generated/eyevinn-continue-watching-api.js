"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnContinueWatchingApiInstance = exports.removeEyevinnContinueWatchingApiInstance = exports.createEyevinnContinueWatchingApiInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-continue-watching-api
 * @description A user of a streaming service expects that they can pick up where they left on any of their devices. To handle that you would need to develop a service with endpoints for the application to write and read from. This open source cloud component take care of that and all you need is to have a Redis database running on Redis Cloud for example.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://dev.to/video/how-to-quickly-setup-a-continue-watching-endpoint-for-your-video-players-ek7|Online docs} for further information
 */
/**
 * @typedef {Object} EyevinnContinueWatchingApiConfig
 * @property {string} name - Name of continue-watching-api
 * @property {string} RedisHost - Redis Host
 * @property {string} [RedisPort] - Redis Port
 * @property {string} [RedisUsername] - Redis Username
 * @property {string} [RedisPassword] - Redis Password

 *
 */
/**
 * @typedef {Object} EyevinnContinueWatchingApi
 * @property {string} name - Name of the Continue Watching Service instance
 * @property {string} url - URL of the Continue Watching Service instance
 *
 */
/**
 * Create a new Continue Watching Service instance
 *
 * @memberOf eyevinn-continue-watching-api
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnContinueWatchingApiConfig} body - Service instance configuration
 * @returns {EyevinnContinueWatchingApi} - Service instance
 * @example
 * import { Context, createEyevinnContinueWatchingApiInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnContinueWatchingApiInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnContinueWatchingApiInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-continue-watching-api');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-continue-watching-api', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-continue-watching-api', instance.name, ctx);
    return instance;
}
exports.createEyevinnContinueWatchingApiInstance = createEyevinnContinueWatchingApiInstance;
/**
 * Remove a Continue Watching Service instance
 *
 * @memberOf eyevinn-continue-watching-api
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the service to be removed
 */
async function removeEyevinnContinueWatchingApiInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-continue-watching-api');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-continue-watching-api', name, serviceAccessToken);
}
exports.removeEyevinnContinueWatchingApiInstance = removeEyevinnContinueWatchingApiInstance;
/**
 * Get a Continue Watching Service instance
 *
 * @memberOf eyevinn-continue-watching-api
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the service to be retrieved
 * @returns {EyevinnContinueWatchingApi} - Service instance
 */
async function getEyevinnContinueWatchingApiInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-continue-watching-api');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-continue-watching-api', name, serviceAccessToken);
}
exports.getEyevinnContinueWatchingApiInstance = getEyevinnContinueWatchingApiInstance;
//# sourceMappingURL=eyevinn-continue-watching-api.js.map