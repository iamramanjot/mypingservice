"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBbcBraveInstance = exports.removeBbcBraveInstance = exports.createBbcBraveInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace bbc-brave
 * @description Brave is a Basic real-time (remote) audio/video editor. It allows LIVE video (and/or audio) to be received, manipulated, and sent elsewhere. Forwarding RTMP from one place to another, mixing two or more inputs or add basic graphics are some example of usage.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://github.com/bbc/brave/blob/master/docs/faq.md|Online docs} for further information
 */
/**
 * @typedef {Object} BbcBraveConfig
 * @property {string} name - Name of brave
 * @property {string} [StunServer] - StunServer
 * @property {string} [TurnServer] - TurnServer

 *
 */
/**
 * @typedef {Object} BbcBrave
 * @property {string} name - Name of the Brave instance
 * @property {string} url - URL of the Brave instance
 *
 */
/**
 * Create a new Brave instance
 *
 * @memberOf bbc-brave
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {BbcBraveConfig} body - Service instance configuration
 * @returns {BbcBrave} - Service instance
 * @example
 * import { Context, createBbcBraveInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createBbcBraveInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createBbcBraveInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('bbc-brave');
    const instance = await (0, client_core_1.createInstance)(ctx, 'bbc-brave', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('bbc-brave', instance.name, ctx);
    return instance;
}
exports.createBbcBraveInstance = createBbcBraveInstance;
/**
 * Remove a Brave instance
 *
 * @memberOf bbc-brave
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the mixer to be removed
 */
async function removeBbcBraveInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('bbc-brave');
    await (0, client_core_1.removeInstance)(ctx, 'bbc-brave', name, serviceAccessToken);
}
exports.removeBbcBraveInstance = removeBbcBraveInstance;
/**
 * Get a Brave instance
 *
 * @memberOf bbc-brave
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the mixer to be retrieved
 * @returns {BbcBrave} - Service instance
 */
async function getBbcBraveInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('bbc-brave');
    return await (0, client_core_1.getInstance)(ctx, 'bbc-brave', name, serviceAccessToken);
}
exports.getBbcBraveInstance = getBbcBraveInstance;
//# sourceMappingURL=bbc-brave.js.map