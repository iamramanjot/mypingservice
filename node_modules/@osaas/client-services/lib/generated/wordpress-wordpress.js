"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWordpressWordpressInstance = exports.removeWordpressWordpressInstance = exports.createWordpressWordpressInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace wordpress-wordpress
 * @description Power your site with WordPress â€“ the core behind 40% of the web. Enjoy seamless installation, robust customization, and unmatched scalability. Elevate your online presence effortlessly today!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Wordpress.html|Online docs} for further information
 */
/**
 * @typedef {Object} WordpressWordpressConfig
 * @property {string} name - Name of wordpress
 * @property {string} DbHost - DbHost
 * @property {string} DbUser - DbUser
 * @property {string} DbPassword - DbPassword
 * @property {string} [DbName] - DbName
 * @property {string} [DbTablePrefix] - DbTablePrefix

 *
 */
/**
 * @typedef {Object} WordpressWordpress
 * @property {string} name - Name of the Wordpress instance
 * @property {string} url - URL of the Wordpress instance
 *
 */
/**
 * Create a new Wordpress instance
 *
 * @memberOf wordpress-wordpress
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {WordpressWordpressConfig} body - Service instance configuration
 * @returns {WordpressWordpress} - Service instance
 * @example
 * import { Context, createWordpressWordpressInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createWordpressWordpressInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createWordpressWordpressInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('wordpress-wordpress');
    const instance = await (0, client_core_1.createInstance)(ctx, 'wordpress-wordpress', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('wordpress-wordpress', instance.name, ctx);
    return instance;
}
exports.createWordpressWordpressInstance = createWordpressWordpressInstance;
/**
 * Remove a Wordpress instance
 *
 * @memberOf wordpress-wordpress
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the wordpress to be removed
 */
async function removeWordpressWordpressInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('wordpress-wordpress');
    await (0, client_core_1.removeInstance)(ctx, 'wordpress-wordpress', name, serviceAccessToken);
}
exports.removeWordpressWordpressInstance = removeWordpressWordpressInstance;
/**
 * Get a Wordpress instance
 *
 * @memberOf wordpress-wordpress
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the wordpress to be retrieved
 * @returns {WordpressWordpress} - Service instance
 */
async function getWordpressWordpressInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('wordpress-wordpress');
    return await (0, client_core_1.getInstance)(ctx, 'wordpress-wordpress', name, serviceAccessToken);
}
exports.getWordpressWordpressInstance = getWordpressWordpressInstance;
//# sourceMappingURL=wordpress-wordpress.js.map