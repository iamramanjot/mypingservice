"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAlexbj75MovierecommendatorInstance = exports.removeAlexbj75MovierecommendatorInstance = exports.createAlexbj75MovierecommendatorInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace alexbj75-movierecommendator
 * @description Discover new films effortlessly! Enter a movie name and get two personalized recommendations powered by OpenAI. Transform your movie nights with Movie Recommenderâ€™s smart suggestions. Try it now!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} Alexbj75MovierecommendatorConfig
 * @property {string} name - Name of movierecommendator
 * @property {string} OpenAiKey - Open AI Api Key

 *
 */
/**
 * @typedef {Object} Alexbj75Movierecommendator
 * @property {string} name - Name of the movierecommendator instance
 * @property {string} url - URL of the movierecommendator instance
 *
 */
/**
 * Create a new movierecommendator instance
 *
 * @memberOf alexbj75-movierecommendator
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {Alexbj75MovierecommendatorConfig} body - Service instance configuration
 * @returns {Alexbj75Movierecommendator} - Service instance
 * @example
 * import { Context, createAlexbj75MovierecommendatorInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createAlexbj75MovierecommendatorInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createAlexbj75MovierecommendatorInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('alexbj75-movierecommendator');
    const instance = await (0, client_core_1.createInstance)(ctx, 'alexbj75-movierecommendator', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('alexbj75-movierecommendator', instance.name, ctx);
    return instance;
}
exports.createAlexbj75MovierecommendatorInstance = createAlexbj75MovierecommendatorInstance;
/**
 * Remove a movierecommendator instance
 *
 * @memberOf alexbj75-movierecommendator
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the movierecommendator to be removed
 */
async function removeAlexbj75MovierecommendatorInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('alexbj75-movierecommendator');
    await (0, client_core_1.removeInstance)(ctx, 'alexbj75-movierecommendator', name, serviceAccessToken);
}
exports.removeAlexbj75MovierecommendatorInstance = removeAlexbj75MovierecommendatorInstance;
/**
 * Get a movierecommendator instance
 *
 * @memberOf alexbj75-movierecommendator
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the movierecommendator to be retrieved
 * @returns {Alexbj75Movierecommendator} - Service instance
 */
async function getAlexbj75MovierecommendatorInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('alexbj75-movierecommendator');
    return await (0, client_core_1.getInstance)(ctx, 'alexbj75-movierecommendator', name, serviceAccessToken);
}
exports.getAlexbj75MovierecommendatorInstance = getAlexbj75MovierecommendatorInstance;
//# sourceMappingURL=alexbj75-movierecommendator.js.map