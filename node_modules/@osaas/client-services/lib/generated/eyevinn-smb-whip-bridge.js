"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnSmbWhipBridgeInstance = exports.removeEyevinnSmbWhipBridgeInstance = exports.createEyevinnSmbWhipBridgeInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-smb-whip-bridge
 * @description Elevate your video streaming with SMB WHIP Bridge! Seamlessly integrate WHIP clients with Symphony Media Bridge SFU for superior media streams.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Symphony-Media-Bridge-WHIP-Gateway.html|Online docs} for further information
 */
/**
 * @typedef {Object} EyevinnSmbWhipBridgeConfig
 * @property {string} name - Name of smb-whip-bridge
 * @property {string} SmbUrl - SmbUrl
 * @property {string} [SmbApiKey] - SmbApiKey
 * @property {string} [WhepEndpointUrl] - WhepEndpointUrl
 * @property {string} [WhipApiKey] - WhipApiKey

 *
 */
/**
 * @typedef {Object} EyevinnSmbWhipBridge
 * @property {string} name - Name of the Symphony Media Bridge WHIP Gateway instance
 * @property {string} url - URL of the Symphony Media Bridge WHIP Gateway instance
 *
 */
/**
 * Create a new Symphony Media Bridge WHIP Gateway instance
 *
 * @memberOf eyevinn-smb-whip-bridge
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnSmbWhipBridgeConfig} body - Service instance configuration
 * @returns {EyevinnSmbWhipBridge} - Service instance
 * @example
 * import { Context, createEyevinnSmbWhipBridgeInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnSmbWhipBridgeInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnSmbWhipBridgeInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-smb-whip-bridge');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-smb-whip-bridge', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-smb-whip-bridge', instance.name, ctx);
    return instance;
}
exports.createEyevinnSmbWhipBridgeInstance = createEyevinnSmbWhipBridgeInstance;
/**
 * Remove a Symphony Media Bridge WHIP Gateway instance
 *
 * @memberOf eyevinn-smb-whip-bridge
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the gateway to be removed
 */
async function removeEyevinnSmbWhipBridgeInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-smb-whip-bridge');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-smb-whip-bridge', name, serviceAccessToken);
}
exports.removeEyevinnSmbWhipBridgeInstance = removeEyevinnSmbWhipBridgeInstance;
/**
 * Get a Symphony Media Bridge WHIP Gateway instance
 *
 * @memberOf eyevinn-smb-whip-bridge
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the gateway to be retrieved
 * @returns {EyevinnSmbWhipBridge} - Service instance
 */
async function getEyevinnSmbWhipBridgeInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-smb-whip-bridge');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-smb-whip-bridge', name, serviceAccessToken);
}
exports.getEyevinnSmbWhipBridgeInstance = getEyevinnSmbWhipBridgeInstance;
//# sourceMappingURL=eyevinn-smb-whip-bridge.js.map