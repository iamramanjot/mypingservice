"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValkeyIoValkeyInstance = exports.removeValkeyIoValkeyInstance = exports.createValkeyIoValkeyInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace valkey-io-valkey
 * @description Introducing Valkey: a Redis-compatible high-performance key-value store with wide range support. Build on various systems, extensible plugin system, and TLS support available.

NB! Data persistence not guaranteed
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Valkey.html|Online docs} for further information
 */
/**
 * @typedef {Object} ValkeyIoValkeyConfig
 * @property {string} name - Name of valkey
 * @property {string} [Password] - Password

 *
 */
/**
 * @typedef {Object} ValkeyIoValkey
 * @property {string} name - Name of the valkey instance
 * @property {string} url - URL of the valkey instance
 *
 */
/**
 * Create a new valkey instance
 *
 * @memberOf valkey-io-valkey
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {ValkeyIoValkeyConfig} body - Service instance configuration
 * @returns {ValkeyIoValkey} - Service instance
 * @example
 * import { Context, createValkeyIoValkeyInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createValkeyIoValkeyInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createValkeyIoValkeyInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('valkey-io-valkey');
    const instance = await (0, client_core_1.createInstance)(ctx, 'valkey-io-valkey', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('valkey-io-valkey', instance.name, ctx);
    return instance;
}
exports.createValkeyIoValkeyInstance = createValkeyIoValkeyInstance;
/**
 * Remove a valkey instance
 *
 * @memberOf valkey-io-valkey
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the valkey to be removed
 */
async function removeValkeyIoValkeyInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('valkey-io-valkey');
    await (0, client_core_1.removeInstance)(ctx, 'valkey-io-valkey', name, serviceAccessToken);
}
exports.removeValkeyIoValkeyInstance = removeValkeyIoValkeyInstance;
/**
 * Get a valkey instance
 *
 * @memberOf valkey-io-valkey
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the valkey to be retrieved
 * @returns {ValkeyIoValkey} - Service instance
 */
async function getValkeyIoValkeyInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('valkey-io-valkey');
    return await (0, client_core_1.getInstance)(ctx, 'valkey-io-valkey', name, serviceAccessToken);
}
exports.getValkeyIoValkeyInstance = getValkeyIoValkeyInstance;
//# sourceMappingURL=valkey-io-valkey.js.map