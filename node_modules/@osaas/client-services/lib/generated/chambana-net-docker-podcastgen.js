"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChambanaNetDockerPodcastgenInstance = exports.removeChambanaNetDockerPodcastgenInstance = exports.createChambanaNetDockerPodcastgenInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace chambana-net-docker-podcastgen
 * @description Effortlessly host and manage your podcasts with our Docker container for Podcast Generator. Quick setup and version flexibility let you focus on content creation while we handle the rest.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} ChambanaNetDockerPodcastgenConfig
 * @property {string} name - Name of docker-podcastgen

 *
 */
/**
 * @typedef {Object} ChambanaNetDockerPodcastgen
 * @property {string} name - Name of the Podcast Generator instance
 * @property {string} url - URL of the Podcast Generator instance
 *
 */
/**
 * Create a new Podcast Generator instance
 *
 * @memberOf chambana-net-docker-podcastgen
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {ChambanaNetDockerPodcastgenConfig} body - Service instance configuration
 * @returns {ChambanaNetDockerPodcastgen} - Service instance
 * @example
 * import { Context, createChambanaNetDockerPodcastgenInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createChambanaNetDockerPodcastgenInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createChambanaNetDockerPodcastgenInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('chambana-net-docker-podcastgen');
    const instance = await (0, client_core_1.createInstance)(ctx, 'chambana-net-docker-podcastgen', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('chambana-net-docker-podcastgen', instance.name, ctx);
    return instance;
}
exports.createChambanaNetDockerPodcastgenInstance = createChambanaNetDockerPodcastgenInstance;
/**
 * Remove a Podcast Generator instance
 *
 * @memberOf chambana-net-docker-podcastgen
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the podcast-generator to be removed
 */
async function removeChambanaNetDockerPodcastgenInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('chambana-net-docker-podcastgen');
    await (0, client_core_1.removeInstance)(ctx, 'chambana-net-docker-podcastgen', name, serviceAccessToken);
}
exports.removeChambanaNetDockerPodcastgenInstance = removeChambanaNetDockerPodcastgenInstance;
/**
 * Get a Podcast Generator instance
 *
 * @memberOf chambana-net-docker-podcastgen
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the podcast-generator to be retrieved
 * @returns {ChambanaNetDockerPodcastgen} - Service instance
 */
async function getChambanaNetDockerPodcastgenInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('chambana-net-docker-podcastgen');
    return await (0, client_core_1.getInstance)(ctx, 'chambana-net-docker-podcastgen', name, serviceAccessToken);
}
exports.getChambanaNetDockerPodcastgenInstance = getChambanaNetDockerPodcastgenInstance;
//# sourceMappingURL=chambana-net-docker-podcastgen.js.map