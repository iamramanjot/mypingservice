"use strict";
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEyevinnLiveEncodingInstance = exports.removeEyevinnLiveEncodingInstance = exports.createEyevinnLiveEncodingInstance = void 0;
const client_core_1 = require("@osaas/client-core");
/**
 * @namespace eyevinn-live-encoding
 * @description Transform your live streaming with Eyevinn Live Encoding: Open-source, ffmpeg-based, and ready for HLS & MPEG-DASH. Streamline now, CDN-ready.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */
/**
 * @typedef {Object} EyevinnLiveEncodingConfig
 * @property {string} name - Name of live-encoding
 * @property {boolean} [HlsOnly] - When enabled only output HLS
 * @property {string} [StreamKey] - Configure encoder to push to rtmp://<host>/live/<StreamKey>
 * @property {string} [OutputUrl] - If specified push to CDN origin

 *
 */
/**
 * @typedef {Object} EyevinnLiveEncoding
 * @property {string} name - Name of the Eyevinn Live Encoding instance
 * @property {string} url - URL of the Eyevinn Live Encoding instance
 *
 */
/**
 * Create a new Eyevinn Live Encoding instance
 *
 * @memberOf eyevinn-live-encoding
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnLiveEncodingConfig} body - Service instance configuration
 * @returns {EyevinnLiveEncoding} - Service instance
 * @example
 * import { Context, createEyevinnLiveEncodingInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await createEyevinnLiveEncodingInstance(ctx, { name: 'myinstance' });
 * console.log(instance.url);
 */
async function createEyevinnLiveEncodingInstance(ctx, body) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-live-encoding');
    const instance = await (0, client_core_1.createInstance)(ctx, 'eyevinn-live-encoding', serviceAccessToken, body);
    await (0, client_core_1.waitForInstanceReady)('eyevinn-live-encoding', instance.name, ctx);
    return instance;
}
exports.createEyevinnLiveEncodingInstance = createEyevinnLiveEncodingInstance;
/**
 * Remove a Eyevinn Live Encoding instance
 *
 * @memberOf eyevinn-live-encoding
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the encoder to be removed
 */
async function removeEyevinnLiveEncodingInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-live-encoding');
    await (0, client_core_1.removeInstance)(ctx, 'eyevinn-live-encoding', name, serviceAccessToken);
}
exports.removeEyevinnLiveEncodingInstance = removeEyevinnLiveEncodingInstance;
/**
 * Get a Eyevinn Live Encoding instance
 *
 * @memberOf eyevinn-live-encoding
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the encoder to be retrieved
 * @returns {EyevinnLiveEncoding} - Service instance
 */
async function getEyevinnLiveEncodingInstance(ctx, name) {
    const serviceAccessToken = await ctx.getServiceAccessToken('eyevinn-live-encoding');
    return await (0, client_core_1.getInstance)(ctx, 'eyevinn-live-encoding', name, serviceAccessToken);
}
exports.getEyevinnLiveEncodingInstance = getEyevinnLiveEncodingInstance;
//# sourceMappingURL=eyevinn-live-encoding.js.map